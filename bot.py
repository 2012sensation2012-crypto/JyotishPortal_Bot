import os
import datetime
import pytz
import logging
import sys
import requests
from astral import LocationInfo
from astral.sun import sun
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import swisseph as swe
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

from functools import lru_cache
from collections import defaultdict
from flask import Flask, jsonify

# –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è jyotish
from jyotish import calculate_astrology

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SWISS EPH ===
ephemeris_path = os.path.join(os.path.dirname(__file__), "ephemeris")
swe.set_ephe_path(ephemeris_path)

geolocator = Nominatim(user_agent="jyotishportal_bot")
tf = TimezoneFinder()

# –ö—ç—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–æ–≤
CITY_COORDS = {}
RUSSIAN_CITIES = [
    "–ê–±–∞–∫–∞–Ω", "–ê–Ω–∞–¥—ã—Ä—å", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å", "–ë–∞—Ä–Ω–∞—É–ª", "–ë–µ–ª–≥–æ—Ä–æ–¥",
    "–ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–ë—Ä–∞—Ç—Å–∫", "–ë—Ä—è–Ω—Å–∫", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑",
    "–í–ª–∞–¥–∏–º–∏—Ä", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–í–æ–ª–æ–≥–¥–∞", "–í–æ—Ä–∫—É—Ç–∞", "–í–æ—Ä–æ–Ω–µ–∂", "–ì–æ—Ä–Ω–æ-–ê–ª—Ç–∞–π—Å–∫",
    "–ì—Ä–æ–∑–Ω—ã–π", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ò–≤–∞–Ω–æ–≤–æ", "–ò–∂–µ–≤—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–ô–æ—à–∫–∞—Ä-–û–ª–∞",
    "–ö–∞–∑–∞–Ω—å", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–ª—É–≥–∞", "–ö–µ–º–µ—Ä–æ–≤–æ", "–ö–∏—Ä–æ–≤", "–ö–∏—à–∏–Ω—ë–≤",
    "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ", "–ö–æ—Å—Ç—Ä–æ–º–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ö—É—Ä–≥–∞–Ω", "–ö—É—Ä—Å–∫",
    "–ö—ã–∑—ã–ª", "–õ–µ–Ω—Å–∫", "–õ–∏–ø–µ—Ü–∫", "–ú–∞–≥–∞–¥–∞–Ω", "–ú–∞–π–∫–æ–ø", "–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–ú–µ—â–æ–≤—Å–∫",
    "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã", "–ú–∏—Ä–Ω—ã–π (–Ø–∫—É—Ç–∏—è)", "–ú–æ—Å–∫–≤–∞", "–ú—É—Ä–º–∞–Ω—Å–∫", "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã",
    "–ù–∞–∑—Ä–∞–Ω—å", "–ù–∞–ª—å—á–∏–∫", "–ù–µ—Ä—é–Ω–≥—Ä–∏", "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ù–æ–≤–≥–æ—Ä–æ–¥",
    "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π", "–ù–æ—Ä–∏–ª—å—Å–∫", "–û–º—Å–∫", "–û—Ä–µ–Ω–±—É—Ä–≥",
    "–û—Ä—ë–ª", "–ü–µ–Ω–∑–∞", "–ü–µ—Ä–º—å", "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π", "–ü—Å–∫–æ–≤",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–†—è–∑–∞–Ω—å", "–°–∞–ª–µ—Ö–∞—Ä–¥", "–°–∞–º–∞—Ä–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–∞—Ä–∞–Ω—Å–∫",
    "–°–∞—Ä–∞—Ç–æ–≤", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "–°–º–æ–ª–µ–Ω—Å–∫", "–°–æ—á–∏", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
    "–°—Ç–∞–Ω—Ü–∏—è –í–æ—Å—Ç–æ–∫", "–°—Ç–∞–Ω—Ü–∏—è –ú–∏—Ä–Ω—ã–π", "–°—É—Ä–≥—É—Ç", "–°—ã–∫—Ç—ã–≤–∫–∞—Ä", "–¢–∞–º–±–æ–≤", "–¢–≤–µ—Ä—å",
    "–¢–∏–∫—Å–∏", "–¢–æ–ª—å—è—Ç—Ç–∏", "–¢–æ–º—Å–∫", "–¢—É–ª–∞", "–¢—é–º–µ–Ω—å", "–£–ª–∞–Ω-–£–¥—ç", "–£–ª—å—è–Ω–æ–≤—Å–∫", "–£—Ñ–∞",
    "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü", "–ß–µ—Ä–∫–µ—Å—Å–∫",
    "–ß–∏—Ç–∞", "–≠–ª–∏—Å—Ç–∞", "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫", "–Ø–∫—É—Ç—Å–∫", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å"
]

# –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
for city in RUSSIAN_CITIES:
    try:
        loc = geolocator.geocode(city, timeout=5)
        if loc:
            CITY_COORDS[city] = (loc.latitude, loc.longitude)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city}: {e}")

# –°–æ–∑–¥–∞—ë–º Flask-—Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Bot is alive! üõ∏"

@flask_app.route('/health')
def health_check():
    return jsonify({"status": "ok", "service": "JyotishPortal_Bot"})

# –ö—ç—à –¥–ª—è Kp-–∏–Ω–¥–µ–∫—Å–∞ (–Ω–∞ 12 —á–∞—Å–æ–≤)
kp_cache = defaultdict(lambda: (None, 0))

def get_kp_index(date):
    current_time = datetime.datetime.now().timestamp()
    if date in kp_cache and current_time - kp_cache[date][1] < 43200:
        cached_value, _ = kp_cache[date]
        if cached_value is not None:
            return cached_value

    try:
        if date.year < 2000:
            return 2.0

        date_str = date.strftime("%Y%m%d")
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ URL!
        url = f"https://xras.ru/txt/kp_BPE3_{date_str}.json"

        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            logger.warning(f"xras.ru returned {response.status_code} for {date_str}")
            return 2.0

        data = response.json()
        target_date_str = date.strftime("%Y-%m-%d")

        for day_data in data.get("data", []):
            if day_data.get("time") == target_date_str:
                kp_values = []
                for key, val in day_data.items():
                    if key.startswith("h") and len(key) == 3:
                        if val == "null":
                            continue
                        try:
                            kp_val = float(val)
                            if 0 <= kp_val <= 9:
                                kp_values.append(kp_val)
                        except:
                            continue
                if kp_values:
                    avg_kp = sum(kp_values) / len(kp_values)
                    kp_cache[date] = (avg_kp, current_time)
                    return avg_kp

        logger.warning(f"Kp –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {target_date_str}")
        kp_cache[date] = (2.0, current_time)
        return 2.0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Kp: {e}")
        kp_cache[date] = (2.0, current_time)
        return 2.0

def is_night(lat, lon, dt):
    try:
        tz_str = tf.timezone_at(lat=lat, lng=lon) or "UTC"
        local_tz = pytz.timezone(tz_str)
        local_dt = dt.astimezone(local_tz)
        city = LocationInfo("", "", tz_str, lat, lon)
        s = sun(city.observer, date=local_dt.date(), elevation=0)
        sunrise = s.get('sunrise')
        sunset = s.get('sunset')
        if sunrise is None or sunset is None:
            return True
        return local_dt < sunrise or local_dt > sunset
    except:
        return True

@lru_cache(maxsize=365)
def get_event_analysis(lat, lon, dt):
    astro_data = calculate_astrology(lat, lon, dt)
    moon_pos = astro_data["moon"]
    rahu_pos = astro_data["rahu"]
    nakshatra = astro_data["nakshatra"]
    moon_house = astro_data["moon_house"]
    sun_pos = astro_data["sun"]
    angle = (moon_pos - sun_pos) % 360
    lon_360 = lon if lon >= 0 else 360 + lon
    rahu_diff = min(abs(lon_360 - rahu_pos), abs(lon_360 - rahu_pos + 360), abs(lon_360 - rahu_pos - 360))
    cond1 = rahu_diff <= 3
    in_8th = 210 <= angle <= 240
    in_12th = 330 <= angle <= 360
    in_mula = nakshatra == "–ú—É–ª–∞"
    cond2 = in_8th or in_12th or in_mula
    cond3 = nakshatra in ["–ê—à–≤–∏–Ω–∏", "–®–∞—Ç–∞–±—Ö–∏—à–∞", "–ú—É–ª–∞", "–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", 
                          "–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", "–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", "–®—Ä–∞–≤–∞–Ω–∞", 
                          "–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", "–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏"]
    cond4 = 25 <= abs(lat) <= 50
    cond5 = is_night(lat, lon, dt)
    kp = get_kp_index(dt.date())
    cond6 = kp <= 5

    if (cond1 or cond3 or cond5) and cond2 and cond4 and cond6:
        return "‚úÖ –¢–∏–ø 1 (–ì–µ–æ–ø–æ—Ä—Ç–∞–ª)"
    elif (in_8th or in_12th) and cond3 and cond6:
        return "üå§ –¢–∏–ø 2 (–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π)"
    elif cond1 and (in_8th or in_12th or in_mula) and kp >= 6:
        return "üí• –¢–∏–ø 4 (–ê–≤–∞—Ä–∏–π–Ω—ã–π)"
    elif cond6 and cond5 and (cond1 or cond3):
        return "üëÅÔ∏è –¢–∏–ø 5 (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π)"
    elif cond5 and cond6 and (cond1 or cond3) and is_historical_contact(lat, lon, dt):
        return "üëΩ –¢–∏–ø 6 (–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π)"
    else:
        return "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã"

def is_historical_contact(lat, lon, dt):
    historical_events = [
        {"lat": 33.3943, "lon": -104.5230, "date": "1947-07-05"},
        {"lat": 52.2392, "lon": -2.6190, "date": "1980-12-26"},
        {"lat": -33.9000, "lon": 18.4200, "date": "1994-01-21"}
    ]
    event_date = dt.strftime("%Y-%m-%d")
    for event in historical_events:
        if abs(event["lat"] - lat) < 0.1 and abs(event["lon"] - lon) < 0.1 and event["date"] == event_date:
            return True
    return False

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def build_city_keyboard(offset=0, limit=10):
    buttons = []
    cities = RUSSIAN_CITIES[offset:offset+limit]
    for i in range(0, len(cities), 2):
        row = [
            InlineKeyboardButton(cities[i], callback_data=f"city:{cities[i]}")
        ]
        if i+1 < len(cities):
            row.append(InlineKeyboardButton(cities[i+1], callback_data=f"city:{cities[i+1]}"))
        buttons.append(row)
    nav = []
    if offset > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cities:{max(0, offset-10)}"))
    if offset + limit < len(RUSSIAN_CITIES):
        nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cities:{offset+10}"))
    if nav:
        buttons.append(nav)
    buttons.append([InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(buttons)

def build_type_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ì–µ–æ–ø–æ—Ä—Ç–∞–ª ‚úÖ", callback_data="type:1")],
        [InlineKeyboardButton("–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π üå§", callback_data="type:2")],
        [InlineKeyboardButton("–ê–≤–∞—Ä–∏–π–Ω—ã–π üí•", callback_data="type:4")],
        [InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def build_year_keyboard():
    current_year = datetime.datetime.now().year
    years = list(range(current_year - 3, current_year + 4))
    buttons = []
    for i in range(0, len(years), 3):
        row = [InlineKeyboardButton(str(y), callback_data=f"year:{y}") for y in years[i:i+3]]
        buttons.append(row)
    buttons.append([InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(buttons)

def build_search_mode_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –ü–æ –æ–¥–Ω–æ–º—É –º–µ—Å—è—Ü—É", callback_data="mode:single")],
        [InlineKeyboardButton("üìÜ –ü–æ —Ç—Ä—ë–º –º–µ—Å—è—Ü–∞–º (–∫–≤–∞—Ä—Ç–∞–ª)", callback_data="mode:quarter")],
        [InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def build_single_month_keyboard():
    months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
              "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    buttons = []
    for i in range(0, 12, 2):
        buttons.append([
            InlineKeyboardButton(months[i], callback_data=f"month:{i+1}"),
            InlineKeyboardButton(months[i+1], callback_data=f"month:{i+2}")
        ])
    buttons.append([InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(buttons)

def build_quarter_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–Ø–Ω–≤‚Äì–ú–∞—Ä", callback_data="quarter:1")],
        [InlineKeyboardButton("–ê–ø—Ä‚Äì–ò—é–Ω", callback_data="quarter:2")],
        [InlineKeyboardButton("–ò—é–ª‚Äì–°–µ–Ω", callback_data="quarter:3")],
        [InlineKeyboardButton("–û–∫—Ç‚Äì–î–µ–∫", callback_data="quarter:4")],
        [InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def build_results_keyboard(results, page=0, per_page=10, mode="single", current_month=None, current_quarter=None, year=None):
    total = len(results)
    start = page * per_page
    end = min(start + per_page, total)
    buttons = []
    if start > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}"))
    if end < total:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"page:{page+1}"))
    if mode == "single":
        if current_month == 12:
            next_month = 1
            next_year = year + 1
        else:
            next_month = current_month + 1
            next_year = year
        buttons.append(InlineKeyboardButton("üîÑ –°–ª–µ–¥. –º–µ—Å—è—Ü", callback_data=f"next_month:{next_year}:{next_month}"))
    elif mode == "quarter":
        next_quarter = current_quarter + 1 if current_quarter < 4 else 1
        next_year = year + 1 if current_quarter == 4 else year
        buttons.append(InlineKeyboardButton("üîÑ –°–ª–µ–¥. –∫–≤–∞—Ä—Ç–∞–ª", callback_data=f"next_quarter:{next_year}:{next_quarter}"))
    buttons.append(InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel"))
    return InlineKeyboardMarkup([buttons] if buttons else [[InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel")]])

async def analyze_period(city, portal_type, year, months):
    coords = CITY_COORDS.get(city)
    if not coords:
        raise Exception("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    lat, lon = coords
    results = []
    for month in months:
        for day in range(1, 32):
            try:
                dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
                event_type = get_event_analysis(lat, lon, dt)
                if (portal_type == 1 and "–¢–∏–ø 1" in event_type) or \
                   (portal_type == 2 and "–¢–∏–ø 2" in event_type) or \
                   (portal_type == 4 and "–¢–∏–ø 4" in event_type):
                    results.append(f"{day:02d}.{month:02d}.{year} ‚Äî {event_type}")
            except:
                continue
    return results

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåç <b>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç–∞–ª–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=build_city_keyboard(),
        parse_mode="HTML"
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_data = context.user_data

    if data == "cancel":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
        return

    if data.startswith("cities:"):
        offset = int(data.split(":")[1])
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=build_city_keyboard(offset)
        )
        return

    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        user_data.update({"city": city, "state": "select_type"})
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: <b>{city}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞:",
            reply_markup=build_type_keyboard(),
            parse_mode="HTML"
        )
        return

    if data.startswith("type:"):
        portal_type = int(data.split(":")[1])
        user_data["portal_type"] = portal_type
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
            reply_markup=build_search_mode_keyboard()
        )
        return

    if data.startswith("mode:"):
        mode = data.split(":")[1]
        user_data["search_mode"] = mode
        if mode == "single":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=build_single_month_keyboard())
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª:", reply_markup=build_quarter_keyboard())
        return

    if data.startswith("year:"):
        year = int(data.split(":")[1])
        user_data["year"] = year
        mode = user_data.get("search_mode")
        if mode == "single":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=build_single_month_keyboard())
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª:", reply_markup=build_quarter_keyboard())
        return

    if data.startswith("month:"):
        month = int(data.split(":")[1])
        user_data["month"] = month
        city = user_data["city"]
        portal_type = user_data["portal_type"]
        year = user_data.get("year")
        if not year:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=build_year_keyboard())
            return
        try:
            results = await analyze_period(city, portal_type, year, [month])
            user_data.update({"results": results, "page": 0, "mode": "single"})
            await show_results(query, user_data, mode="single", current_month=month, year=year)
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if data.startswith("quarter:"):
        quarter = int(data.split(":")[1])
        quarters = {1: [1,2,3], 2: [4,5,6], 3: [7,8,9], 4: [10,11,12]}
        months = quarters[quarter]
        user_data["quarter"] = quarter
        user_data["months"] = months
        city = user_data["city"]
        portal_type = user_data["portal_type"]
        year = user_data.get("year")
        if not year:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=build_year_keyboard())
            return
        try:
            results = await analyze_period(city, portal_type, year, months)
            user_data.update({"results": results, "page": 0, "mode": "quarter"})
            await show_results(query, user_data, mode="quarter", current_quarter=quarter, year=year)
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if data.startswith("page:"):
        page = int(data.split(":")[1])
        user_data["page"] = max(0, page)
        mode = user_data.get("mode", "single")
        current_month = user_data.get("month")
        current_quarter = user_data.get("quarter")
        year = user_data.get("year")
        await show_results(query, user_data, mode=mode, current_month=current_month, current_quarter=current_quarter, year=year)
        return

    if data.startswith("next_month:"):
        parts = data.split(":")
        year = int(parts[1])
        month = int(parts[2])
        user_data.update({"year": year, "month": month})
        city = user_data["city"]
        portal_type = user_data["portal_type"]
        try:
            results = await analyze_period(city, portal_type, year, [month])
            user_data.update({"results": results, "page": 0, "mode": "single"})
            await show_results(query, user_data, mode="single", current_month=month, year=year)
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if data.startswith("next_quarter:"):
        parts = data.split(":")
        year = int(parts[1])
        quarter = int(parts[2])
        quarters = {1: [1,2,3], 2: [4,5,6], 3: [7,8,9], 4: [10,11,12]}
        months = quarters[quarter]
        user_data.update({"year": year, "quarter": quarter, "months": months})
        city = user_data["city"]
        portal_type = user_data["portal_type"]
        try:
            results = await analyze_period(city, portal_type, year, months)
            user_data.update({"results": results, "page": 0, "mode": "quarter"})
            await show_results(query, user_data, mode="quarter", current_quarter=quarter, year=year)
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

async def show_results(query, user_data, mode, current_month=None, current_quarter=None, year=None):
    results = user_data.get("results", [])
    page = user_data.get("page", 0)
    per_page = 10
    start = page * per_page
    end = start + per_page
    chunk = results[start:end]

    if results:
        text = f"üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ({start+1}‚Äì{min(end, len(results))} –∏–∑ {len(results)}):\n\n" + "\n".join(chunk)
    else:
        if mode == "single":
            text = f"‚ùå –ü–æ—Ä—Ç–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {current_month}.{year}."
        else:
            q_names = {1: "–Ø–Ω–≤‚Äì–ú–∞—Ä", 2: "–ê–ø—Ä‚Äì–ò—é–Ω", 3: "–ò—é–ª‚Äì–°–µ–Ω", 4: "–û–∫—Ç‚Äì–î–µ–∫"}
            text = f"‚ùå –ü–æ—Ä—Ç–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {q_names.get(current_quarter, '–∫–≤–∞—Ä—Ç–∞–ª–µ')} {year}."

    reply_markup = build_results_keyboard(
        results, page=page, mode=mode,
        current_month=current_month, current_quarter=current_quarter, year=year
    )
    await query.edit_message_text(text, reply_markup=reply_markup)

# === –†–£–ß–ù–û–ô –ü–û–ò–°–ö (–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –µ—Å—Ç—å) ===
async def manual_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–æ—Å—Ç–∞–≤—å —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start\n"
        "2Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º\n"
        "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫: <code>5 –∏—é–ª—è 2000, Roswell, USA</code>\n\n"
        "–î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å 2000 –≥–æ–¥–∞.",
        parse_mode="HTML"
    )

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    TOKEN = os.environ["TELEGRAM_TOKEN"]
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.Regex(r'\d+\s+\w+,\s+[\w\s]+'), manual_search))

    # Flask + heartbeat (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å)
    from threading import Thread
    def run_flask():
        flask_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))
    Thread(target=run_flask, daemon=True).start()

    def run_heartbeat():
        import asyncio, time
        while True:
            time.sleep(300)
            print("heartbeat")
    Thread(target=run_heartbeat, daemon=True).start()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (INLINE-–†–ï–ñ–ò–ú).")
    app.run_polling()