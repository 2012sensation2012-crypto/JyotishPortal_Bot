import os
import datetime
import pytz
import logging
import sys
import requests
from astral import LocationInfo
from astral.sun import sun
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import swisseph as swe
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes, 
    filters,
    ConversationHandler
)

from functools import lru_cache
from collections import defaultdict
from flask import Flask, jsonify

# –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è jyotish
from jyotish import calculate_astrology

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
(STATE_START, STATE_SELECT_TYPE, STATE_ENTER_YEAR) = range(3)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SWISS EPH ===
ephemeris_path = os.path.join(os.path.dirname(__file__), "ephemeris")
swe.set_ephe_path(ephemeris_path)

geolocator = Nominatim(user_agent="ufo_portal_bot")
tf = TimezoneFinder()

# –°–æ–∑–¥–∞—ë–º Flask-—Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Bot is alive! üõ∏"

@flask_app.route('/health')
def health_check():
    return jsonify({"status": "ok", "service": "JyotishPortal_Bot"})

# –ö—ç—à –¥–ª—è Kp-–∏–Ω–¥–µ–∫—Å–∞ (–Ω–∞ 12 —á–∞—Å–æ–≤)
kp_cache = defaultdict(lambda: (None, 0))

def get_kp_index(date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Kp-–∏–Ω–¥–µ–∫—Å –∏–∑ API NOAA"""
    current_time = datetime.datetime.now().timestamp()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if date in kp_cache and current_time - kp_cache[date][1] < 43200:  # 12 —á–∞—Å–æ–≤
        cached_value, _ = kp_cache[date]
        if cached_value is not None:
            return cached_value
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL (–±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –≤ –∫–æ–Ω—Ü–µ)
        response = requests.get(
            "https://services.swpc.noaa.gov/json/planetary-kp.json",
            timeout=10
        )
        
        if response.status_code != 200:
            logger.warning(f"API NOAA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {response.status_code})")
            return 2.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API
        
        data = response.json()
        date_str = date.strftime("%Y-%m-%d")
        
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
        for entry in data:
            time_tag = entry.get("time_tag", "")
            if time_tag.startswith(date_str):
                kp_str = entry.get("kp", "2.0")
                try:
                    kp = float(kp_str)
                    kp_cache[date] = (kp, current_time)
                    return kp
                except (TypeError, ValueError):
                    continue
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å (–¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –¥–∞—Ç)
        if date < datetime.datetime.now().date():
            yesterday = date - datetime.timedelta(days=1)
            yesterday_str = yesterday.strftime("%Y-%m-%d")
            
            for entry in data:
                time_tag = entry.get("time_tag", "")
                if time_tag.startswith(yesterday_str):
                    kp_str = entry.get("kp", "2.0")
                    try:
                        kp = float(kp_str)
                        kp_cache[date] = (kp, current_time)
                        return kp
                    except (TypeError, ValueError):
                        continue
        
        # –î–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        if date > datetime.datetime.now().date():
            for entry in data:
                if "forecast" in entry:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π Kp
                    kp_str = entry["forecast"][0]
                    try:
                        kp = float(kp_str)
                        kp_cache[date] = (kp, current_time)
                        return kp
                    except (TypeError, ValueError):
                        pass
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        kp_cache[date] = (2.0, current_time)
        return 2.0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Kp-–∏–Ω–¥–µ–∫—Å–∞: {e}")
        kp_cache[date] = (2.0, current_time)
        return 2.0

def is_night(lat, lon, dt):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –Ω–æ—á—å—é –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        tz_str = tf.timezone_at(lat=lat, lng=lon) or "UTC"
        local_tz = pytz.timezone(tz_str)
        local_dt = dt.astimezone(local_tz)
        
        city = LocationInfo("", "", tz_str, lat, lon)
        s = sun(city.observer, date=local_dt.date(), observer_elevation=0)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
        sunrise = s.get('sunrise', None)
        sunset = s.get('sunset', None)
        
        if sunrise is None or sunset is None:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º –∑–∞ –Ω–æ—á—å (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            return True
            
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
        return local_dt < sunrise or local_dt > sunset

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ—á–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        return True

def get_country(lat, lon):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    try:
        location = geolocator.reverse(f"{lat}, {lon}", language='en', timeout=5)
        if location and 'address' in location.raw:
            country = location.raw['address'].get('country', '‚Äî')
            country_map = {
                "United States": "–°–®–ê",
                "Russia": "–†–æ—Å—Å–∏—è",
                "United Kingdom": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                "Germany": "–ì–µ—Ä–º–∞–Ω–∏—è",
                "France": "–§—Ä–∞–Ω—Ü–∏—è",
                "Canada": "–ö–∞–Ω–∞–¥–∞",
                "Mexico": "–ú–µ–∫—Å–∏–∫–∞",
                "Japan": "–Ø–ø–æ–Ω–∏—è",
                "China": "–ö–∏—Ç–∞–π",
                "India": "–ò–Ω–¥–∏—è",
                "Brazil": "–ë—Ä–∞–∑–∏–ª–∏—è",
                "Australia": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
                "Ukraine": "–£–∫—Ä–∞–∏–Ω–∞",
                "Turkey": "–¢—É—Ä—Ü–∏—è",
                "Italy": "–ò—Ç–∞–ª–∏—è",
                "Spain": "–ò—Å–ø–∞–Ω–∏—è"
            }
            return country_map.get(country, country)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É: {e}")
    return "‚Äî"

@lru_cache(maxsize=365)
def get_event_analysis(lat, lon, dt):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ jyotish.py
    astro_data = calculate_astrology(lat, lon, dt)
    
    moon_pos = astro_data["moon"]
    rahu_pos = astro_data["rahu"]
    nakshatra = astro_data["nakshatra"]
    moon_house = astro_data["moon_house"]
    houses = astro_data["houses"]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –õ—É–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –°–æ–ª–Ω—Ü–∞
    sun_pos = astro_data["sun"]
    angle = (moon_pos - sun_pos) % 360
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –†–∞—Ö—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–≥–æ—Ç—ã –º–µ—Å—Ç–∞
    lon_360 = lon if lon >= 0 else 360 + lon
    rahu_diff = min(
        abs(lon_360 - rahu_pos),
        abs(lon_360 - rahu_pos + 360),
        abs(lon_360 - rahu_pos - 360)
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è
    cond1 = rahu_diff <= 3
    in_8th = 210 <= angle <= 240
    in_12th = 330 <= angle <= 360
    in_mula = nakshatra == "–ú—É–ª–∞"
    cond2 = in_8th or in_12th or in_mula
    cond3 = nakshatra in ["–ê—à–≤–∏–Ω–∏", "–®–∞—Ç–∞–±—Ö–∏—à–∞", "–ú—É–ª–∞", "–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", 
                          "–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", "–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", "–®—Ä–∞–≤–∞–Ω–∞", 
                          "–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", "–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏"]
    cond4 = 25 <= abs(lat) <= 50
    cond5 = is_night(lat, lon, dt)
    kp = get_kp_index(dt.date())
    cond6 = kp <= 5
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    if (cond1 or cond3 or cond5) and cond2 and cond4 and cond6:
        event_type = "‚úÖ –¢–∏–ø 1 (–ì–µ–æ–ø–æ—Ä—Ç–∞–ª)"
    elif (in_8th or in_12th) and cond3 and cond6:
        event_type = "üå§ –¢–∏–ø 2 (–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π)"
    elif cond1 and (in_8th or in_12th or in_mula) and kp >= 6:
        event_type = "üí• –¢–∏–ø 4 (–ê–≤–∞—Ä–∏–π–Ω—ã–π)"
    elif cond6 and cond5 and (cond1 or cond3):
        event_type = "üëÅÔ∏è –¢–∏–ø 5 (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π)"
    elif cond5 and cond6 and (cond1 or cond3) and is_historical_contact(lat, lon, dt):
        event_type = "üëΩ –¢–∏–ø 6 (–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π)"
    else:
        event_type = "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã"

    details = (
        f"‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.4f}, {lon:.4f}\n"
        f"‚Ä¢ –ù–∞–∫—à–∞—Ç—Ä–∞: {nakshatra or '‚Äî'}\n"
        f"‚Ä¢ –î–æ–º –õ—É–Ω—ã: {moon_house or '‚Äî'}\n"
        f"‚Ä¢ –ó–Ω–∞–∫ –õ—É–Ω—ã: {astro_data['moon_sign']}\n"
        f"‚Ä¢ –†–∞—Ö—É –æ—Ç –¥–æ–ª–≥–æ—Ç—ã: {rahu_diff:.1f}¬∞\n"
        f"‚Ä¢ Kp-–∏–Ω–¥–µ–∫—Å: {kp}\n"
        f"‚Ä¢ –ù–æ—á—å: {'–î–∞' if cond5 else '–ù–µ—Ç'}"
    )
    return event_type, details

def is_historical_contact(lat, lon, dt):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ"""
    historical_events = [
        {"lat": 33.3943, "lon": -104.5230, "date": "1947-07-05"},
        {"lat": 52.2392, "lon": -2.6190, "date": "1980-12-26"},
        {"lat": -33.9000, "lon": 18.4200, "date": "1994-01-21"}
    ]
    
    event_date = dt.strftime("%Y-%m-%d")
    
    for event in historical_events:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö) –∏ –¥–∞—Ç—É
        lat_diff = abs(event["lat"] - lat)
        lon_diff = abs(event["lon"] - lon)
        if lat_diff < 0.1 and lon_diff < 0.1 and event["date"] == event_date:
            return True
    return False

# === –ö–û–ù–¢–ò–ù–ï–ù–¢–ê–õ–¨–ù–´–ï –ó–û–ù–´ ===
CONTINENTS = {
    "–µ–≤—Ä–∞–∑–∏—è": {
        "name": "–ï–≤—Ä–∞–∑–∏—è",
        "min_lat": -10,
        "max_lat": 80,
        "min_lon": -20,
        "max_lon": 180,
        "regions": [
            {"name": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "lat": 56.8380, "lon": 60.6057},
            {"name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "lat": 55.7558, "lon": 37.6173},
            {"name": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "lat": 55.0415, "lon": 82.9343},
            {"name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "lat": 45.0355, "lon": 38.9760},
            {"name": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π", "lat": 56.0184, "lon": 92.8679},
            {"name": "–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π", "lat": 48.4943, "lon": 135.0687}
        ]
    },
    "—Å–µ–≤–µ—Ä–Ω–∞—è –∞–º–µ—Ä–∏–∫–∞": {
        "name": "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞",
        "min_lat": 15,
        "max_lat": 75,
        "min_lon": -170,
        "max_lon": -50,
        "regions": [
            {"name": "–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è", "lat": 36.7783, "lon": -119.4179},
            {"name": "–¢–µ—Ö–∞—Å", "lat": 31.9686, "lon": -99.9018},
            {"name": "–ö–∞–Ω–∞–¥–∞", "lat": 56.1304, "lon": -106.3468},
            {"name": "–ú–µ–∫—Å–∏–∫–∞", "lat": 23.6345, "lon": -102.5528}
        ]
    },
    "—é–∂–Ω–∞—è –∞–º–µ—Ä–∏–∫–∞": {
        "name": "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞",
        "min_lat": -60,
        "max_lat": 15,
        "min_lon": -80,
        "max_lon": -35,
        "regions": [
            {"name": "–ë—Ä–∞–∑–∏–ª–∏—è", "lat": -14.2350, "lon": -51.9253},
            {"name": "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", "lat": -38.4161, "lon": -63.6167},
            {"name": "–ß–∏–ª–∏", "lat": -35.6751, "lon": -71.5429}
        ]
    },
    "–∞—Ñ—Ä–∏–∫–∞": {
        "name": "–ê—Ñ—Ä–∏–∫–∞",
        "min_lat": -35,
        "max_lat": 35,
        "min_lon": -20,
        "max_lon": 50,
        "regions": [
            {"name": "–ï–≥–∏–ø–µ—Ç", "lat": 26.8206, "lon": 30.8025},
            {"name": "–ö–µ–Ω–∏—è", "lat": -0.0236, "lon": 37.9062},
            {"name": "–Æ–ê–†", "lat": -25.7461, "lon": 28.1876}
        ]
    },
    "–∞–≤—Å—Ç—Ä–∞–ª–∏—è": {
        "name": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
        "min_lat": -45,
        "max_lat": -10,
        "min_lon": 110,
        "max_lon": 160,
        "regions": [
            {"name": "–°–∏–¥–Ω–µ–π", "lat": -33.8688, "lon": 151.2093},
            {"name": "–ú–µ–ª—å–±—É—Ä–Ω", "lat": -37.8136, "lon": 144.9631},
            {"name": "–ü–µ—Ä—Ç", "lat": -31.9505, "lon": 115.8605}
        ]
    }
}

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º–∏
    keyboard = [
        [KeyboardButton("–ï–≤—Ä–∞–∑–∏—è üåè"), KeyboardButton("–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ üåé")],
        [KeyboardButton("–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ üåç"), KeyboardButton("–ê—Ñ—Ä–∏–∫–∞ üåç")],
        [KeyboardButton("–ê–≤—Å—Ç—Ä–∞–ª–∏—è üåè")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await update.message.reply_text(
        "üåç <b>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç–∞–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "‚Ä¢ –ï–≤—Ä–∞–∑–∏—è\n"
        "‚Ä¢ –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞\n"
        "‚Ä¢ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞\n"
        "‚Ä¢ –ê—Ñ—Ä–∏–∫–∞\n"
        "‚Ä¢ –ê–≤—Å—Ç—Ä–∞–ª–∏—è\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –ø–æ—Ä—Ç–∞–ª—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    
    return STATE_START

async def select_continent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()
    continent = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    for key in CONTINENTS.keys():
        if key in user_input or CONTINENTS[key]["name"].lower() in user_input:
            continent = key
            break
    
    if not continent:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ï–≤—Ä–∞–∑–∏—è üåè"), KeyboardButton("–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ üåé")],
                    [KeyboardButton("–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ üåç"), KeyboardButton("–ê—Ñ—Ä–∏–∫–∞ üåç")],
                    [KeyboardButton("–ê–≤—Å—Ç—Ä–∞–ª–∏—è üåè")]
                ],
                resize_keyboard=True
            )
        )
        return STATE_START
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç
    context.user_data['continent'] = continent
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Ä—Ç–∞–ª–æ–≤
    keyboard = [
        [KeyboardButton("–ì–µ–æ–ø–æ—Ä—Ç–∞–ª ‚úÖ"), KeyboardButton("–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π üå§")],
        [KeyboardButton("–ê–≤–∞—Ä–∏–π–Ω—ã–π üí•")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await update.message.reply_text(
        f"üîç –í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç: <b>{CONTINENTS[continent]['name']}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
        "‚Ä¢ –ì–µ–æ–ø–æ—Ä—Ç–∞–ª (–¢–∏–ø 1)\n"
        "‚Ä¢ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π (–¢–∏–ø 2)\n"
        "‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω—ã–π (–¢–∏–ø 4)\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    
    return STATE_SELECT_TYPE

async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()
    portal_type = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞
    if "–≥–µ–æ–ø–æ—Ä—Ç–∞–ª" in user_input or "1" in user_input or "‚úÖ" in user_input:
        portal_type = 1
    elif "–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π" in user_input or "2" in user_input or "üå§" in user_input:
        portal_type = 2
    elif "–∞–≤–∞—Ä–∏–π–Ω—ã–π" in user_input or "4" in user_input or "üí•" in user_input:
        portal_type = 4
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ì–µ–æ–ø–æ—Ä—Ç–∞–ª ‚úÖ"), KeyboardButton("–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π üå§")],
                    [KeyboardButton("–ê–≤–∞—Ä–∏–π–Ω—ã–π üí•")]
                ],
                resize_keyboard=True
            )
        )
        return STATE_SELECT_TYPE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞
    context.user_data['portal_type'] = portal_type
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ–¥
    await update.message.reply_text(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025):",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return STATE_ENTER_YEAR

async def enter_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        year = int(update.message.text)
        if year < 1900 or year > 2100:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1900-2100."
            )
            return STATE_ENTER_YEAR
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        continent = context.user_data.get('continent')
        portal_type = context.user_data.get('portal_type')
        
        if not continent or portal_type is None:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await update.message.reply_text(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {year} –≥–æ–¥–∞ –¥–ª—è {CONTINENTS[continent]['name']}...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        results = []
        for region in CONTINENTS[continent]["regions"]:
            for month in range(1, 13):
                for day in range(1, 32):
                    try:
                        dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
                        event_type, _ = get_event_analysis(region["lat"], region["lon"], dt)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞
                        if (portal_type == 1 and "–¢–∏–ø 1" in event_type) or \
                           (portal_type == 2 and "–¢–∏–ø 2" in event_type) or \
                           (portal_type == 4 and "–¢–∏–ø 4" in event_type):
                            
                            results.append(
                                f"{day:02d}.{month:02d}.{year} ‚Äî {event_type}\n"
                                f"‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {region['lat']:.4f}, {region['lon']:.4f}\n"
                                f"‚Ä¢ {region['name']} ({CONTINENTS[continent]['name']})"
                            )
                    except:
                        continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            full = "\n\n".join(results[:50])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if len(results) > 50:
                full += "\n\n<i>(–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)</i>"
            await update.message.reply_text(full, parse_mode="HTML")
        else:
            await update.message.reply_text("‚ùå –ü–æ—Ä—Ç–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        return ConversationHandler.END
    
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025).")
        return STATE_ENTER_YEAR

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–£–ß–ù–û–ô –ü–û–ò–°–ö ===
async def manual_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {update.message.text}")
        text = update.message.text.strip()
        if "," not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

        parts = text.split(",", 1)
        if len(parts) < 2:
            raise ValueError("–ù—É–∂–Ω–æ: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ")

        date_str = parts[0].strip()
        rest = parts[1].strip()

        months = {
            "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
            "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
            "january":1, "february":2, "march":3, "april":4, "may":5, "june":6,
            "july":7, "august":8, "september":9, "october":10, "november":11, "december":12,
            "jan":1, "feb":2, "mar":3, "apr":4, "may":5, "jun":6,
            "jul":7, "aug":8, "sep":9, "oct":10, "nov":11, "dec":12
        }
        date_parts = date_str.split()
        if len(date_parts) == 3:
            day = int(date_parts[0])
            month_str = date_parts[1].lower().rstrip('.')
            year = int(date_parts[2])
            month = months.get(month_str, 1)
            if month == 1 and month_str not in months:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü")
            dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
        else:
            raise ValueError("–§–æ—Ä–º–∞—Ç: 5 –∏—é–ª—è 1947")

        place_synonyms = {
            # ... (–≤–µ—Å—å —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å place_synonyms –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            "–†–æ–∑—É—ç–ª–ª": "Roswell",
            "–°–®–ê": "USA",
            "–ù—å—é-–ô–æ—Ä–∫": "New York",
            "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å": "Los Angeles",
            "–ß–∏–∫–∞–≥–æ": "Chicago",
            "–•—å—é—Å—Ç–æ–Ω": "Houston",
            "–§–∏–Ω–∏–∫—Å": "Phoenix",
            "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è": "Philadelphia",
            "–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ": "San Antonio",
            "–°–∞–Ω-–îiego": "San Diego",
            "–î–∞–ª–ª–∞—Å": "Dallas",
            "–°–∞–Ω-–•–æ—Å–µ": "San Jose",
            "–û—Å—Ç–∏–Ω": "Austin",
            "–î–∂–µ–∫—Å–æ–Ω–≤–∏–ª–ª": "Jacksonville",
            "–§–æ—Ä—Ç-–£—ç—Ä—Ç": "Fort Worth",
            "–ö–æ–ª–∞–º–±—É—Å": "Columbus",
            "–ò–Ω–¥–∏–∞–Ω–∞–ø–æ–ª–∏—Å": "Indianapolis",
            "–®–∞—Ä–ª–æ—Ç—Ç": "Charlotte",
            "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ": "San Francisco",
            "–°–∏—ç—Ç–ª": "Seattle",
            "–î–µ–Ω–≤–µ—Ä": "Denver",
            "–í–∞—à–∏–Ω–≥—Ç–æ–Ω": "Washington",
            "–ë–æ—Å—Ç–æ–Ω": "Boston",
            "–≠–ª-–ü–∞—Å–æ": "El Paso",
            "–î–µ—Ç—Ä–æ–π—Ç": "Detroit",
            "–ú–µ–º—Ñ–∏—Å": "Memphis",
            "–ü–æ—Ä—Ç–ª–µ–Ω–¥": "Portland",
            "–õ–∞—Å-–í–µ–≥–∞—Å": "Las Vegas",
            "–ú–∏–ª—É–æ–∫–∏": "Milwaukee",
            "–ê–ª—å–±—É–∫–µ—Ä–∫–µ": "Albuquerque",
            "–¢—É—Å–æ–Ω": "Tucson",
            "–§—Ä–µ—Å–Ω–æ": "Fresno",
            "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ": "Sacramento",
            "–õ–æ–Ω–≥-–ë–∏—á": "Long Beach",
            "–ö–∞–Ω–∑–∞—Å-–°–∏—Ç–∏": "Kansas City",
            "–ú–µ—Å–∞": "Mesa",
            "–ê—Ç–ª–∞–Ω—Ç–∞": "Atlanta",
            "–ú–∞–π–∞–º–∏": "Miami",
            "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏": "Oklahoma City",
            "–ù—ç—à–≤–∏–ª–ª": "Nashville",
            "–õ—É–∏—Å–≤–∏–ª–ª": "Louisville",
            "–ë–∞–ª—Ç–∏–º–æ—Ä": "Baltimore",
            "–¢–æ—Ä–æ–Ω—Ç–æ": "Toronto",
            "–ú–æ–Ω—Ä–µ–∞–ª—å": "Montreal",
            "–ö–∞–ª–≥–∞—Ä–∏": "Calgary",
            "–û—Ç—Ç–∞–≤–∞": "Ottawa",
            "–≠–¥–º–æ–Ω—Ç–æ–Ω": "Edmonton",
            "–ú–∏—Å—Å–∏—Å—Å–∞–≥–∞": "Mississauga",
            "–í–∏–Ω–Ω–∏–ø–µ–≥": "Winnipeg",
            "–í–∞–Ω–∫—É–≤–µ—Ä": "Vancouver",
            "–ë—Ä–∞–º–ø—Ç–æ–Ω": "Brampton",
            "–ì–∞–º–∏–ª—å—Ç–æ–Ω": "Hamilton",
            "–ú–µ—Ö–∏–∫–æ": "Mexico City",
            "–ì–≤–∞–¥–∞–ª–∞—Ö–∞—Ä–∞": "Guadalajara",
            "–ú–æ–Ω—Ç–µ—Ä—Ä–µ–π": "Monterrey",
            "–ü—É—ç–±–ª–∞": "Puebla",
            "–¢–∏—É–∞–Ω–∞": "Tijuana",
            "–õ–µ–æ–Ω": "Leon",
            "–•—É–∞—Ä–µ—Å": "Juarez",
            "–°–∞–Ω-–õ—É–∏—Å-–ü–æ—Ç–æ—Å–∏": "San Luis Potosi",
            "–ú–µ—Ä–∏–¥–∞": "Merida",
            "–ö–∞–Ω–∫—É–Ω": "Cancun",
            "–õ–æ–Ω–¥–æ–Ω": "London",
            "–ü–∞—Ä–∏–∂": "Paris",
            "–ë–µ—Ä–ª–∏–Ω": "Berlin",
            "–ú–∞–¥—Ä–∏–¥": "Madrid",
            "–†–∏–º": "Rome",
            "–ê–º—Å—Ç–µ—Ä–¥–∞–º": "Amsterdam",
            "–ë—Ä—é—Å—Å–µ–ª—å": "Brussels",
            "–í–µ–Ω–∞": "Vienna",
            "–ë—É–¥–∞–ø–µ—à—Ç": "Budapest",
            "–í–∞—Ä—à–∞–≤–∞": "Warsaw",
            "–ü—Ä–∞–≥–∞": "Prague",
            "–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω": "Copenhagen",
            "–°—Ç–æ–∫–≥–æ–ª—å–º": "Stockholm",
            "–û—Å–ª–æ": "Oslo",
            "–•–µ–ª—å—Å–∏–Ω–∫–∏": "Helsinki",
            "–î—É–±–ª–∏–Ω": "Dublin",
            "–õ–∏—Å—Å–∞–±–æ–Ω": "Lisbon",
            "–ê—Ñ–∏–Ω—ã": "Athens",
            "–ë—É—Ö–∞—Ä–µ—Å—Ç": "Bucharest",
            "–°–æ—Ñ–∏—è": "Sofia",
            "–ó–∞–≥—Ä–µ–±": "Zagreb",
            "–ë–µ–ª–≥—Ä–∞–¥": "Belgrade",
            "–ö–∏–µ–≤": "Kyiv",
            "–ú–∏–Ω—Å–∫": "Minsk",
            "–ú–æ—Å–∫–≤–∞": "Moscow",
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "Yekaterinburg",
            "–ö–∞–∑–∞–Ω—å": "Kazan",
            "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "Nizhny Novgorod",
            "–ß–µ–ª—è–±–∏–Ω—Å–∫": "Chelyabinsk",
            "–°–∞–º–∞—Ä–∞": "Samara",
            "–û–º—Å–∫": "Omsk",
            "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "Rostov-on-Don",
            "–£—Ñ–∞": "Ufa",
            "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk",
            "–í–æ—Ä–æ–Ω–µ–∂": "Voronezh",
            "–ü–µ—Ä–º—å": "Perm",
            "–í–æ–ª–≥–æ–≥—Ä–∞–¥": "Volgograd",
            "–¢–æ–∫–∏–æ": "Tokyo",
            "–î–µ–ª–∏": "Delhi",
            "–®–∞–Ω—Ö–∞–π": "Shanghai",
            "–ü–µ–∫–∏–Ω": "Beijing",
            "–ú—É–º–±–∞–∏": "Mumbai",
            "–û—Å–∞–∫–∞": "Osaka",
            "–°–µ—É–ª": "Seoul",
            "–°—Ç–∞–º–±—É–ª": "Istanbul",
            "–¢–µ–≥–µ—Ä–∞–Ω": "Tehran",
            "–ë–∞–Ω–≥–∫–æ–∫": "Bangkok",
            "–ö—É–∞–ª–∞-–õ—É–º–ø—É—Ä": "Kuala Lumpur",
            "–ú–∞–Ω–∏–ª–∞": "Manila",
            "–î–∂–∞–∫–∞—Ä—Ç–∞": "Jakarta",
            "–°–∏–Ω–≥–∞–ø—É—Ä": "Singapore",
            "–•–∞–Ω–æ–π": "Hanoi",
            "–î—É–±–∞–π": "Dubai",
            "–≠—Ä-–†–∏—è–¥": "Riyadh",
            "–ö–∞–∏—Ä": "Cairo",
            "–ô–æ—Ö–∞–Ω–Ω–µ—Å–±—É—Ä–≥": "Johannesburg",
            "–ù–∞–π—Ä–æ–±–∏": "Nairobi",
            "–ö–µ–π–ø—Ç–∞—É–Ω": "Cape Town",
            "–õ–∞–≥–æ—Å": "Lagos",
            "–ê–¥–¥–∏—Å-–ê–±–µ–±–∞": "Addis Ababa",
            "–¢—Ä–∏–ø–æ–ª–∏": "Tripoli",
            "–ê–ª–∂–∏—Ä": "Algiers",
            "–ö–∞—Å–∞–±–ª–∞–Ω–∫–∞": "Casablanca",
            "–¢—É–Ω–∏—Å": "Tunis",
            "–î–∞–∫–∞—Ä": "Dakar",
            "–ê–∫–∫—Ä–∞": "Accra",
            "–õ—É–∞–Ω–¥–∞": "Luanda",
            "–•–∞—Ä–∞—Ä–µ": "Harare",
            "–õ—É—Å–∞–∫–∞": "Lusaka",
            "–ú–∞–ø—É—Ç—É": "Maputo",
            "–ê–Ω—Ç–∞–Ω–∞–Ω–∞—Ä–∏–≤—É": "Antananarivo",
            "–ü–æ—Ä—Ç-–õ—É–∏": "Port Louis",
            "–ú–æ—Ä–æ–Ω–∏": "Moroni",
            "–í–∏–∫—Ç–æ—Ä–∏—è": "Victoria",
            "–†–µ–Ω–¥–ª–µ—à–µ–º": "Rendlesham",
            "–ö–∞–Ω–∞–¥–∞": "Canada",
            "–ú–µ–∫—Å–∏–∫–∞": "Mexico",
            "–ë—Ä–∞–∑–∏–ª–∏—è": "Brazil",
            "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "Argentina",
            "–ß–∏–ª–∏": "Chile",
            "–ü–µ—Ä—É": "Peru",
            "–ö–æ–ª—É–º–±–∏—è": "Colombia",
            "–í–µ–Ω–µ—Å—É—ç–ª–∞": "Venezuela",
            "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "Australia",
            "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è": "New Zealand",
            "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "United Kingdom",
            "–§—Ä–∞–Ω—Ü–∏—è": "France",
            "–ì–µ—Ä–º–∞–Ω–∏—è": "Germany",
            "–ò—Ç–∞–ª–∏—è": "Italy",
            "–ò—Å–ø–∞–Ω–∏—è": "Spain",
            "–†–æ—Å—Å–∏—è": "Russia",
            "–£–∫—Ä–∞–∏–Ω–∞": "Ukraine",
            "–ë–µ–ª—å–≥–∏—è": "Belgium",
            "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "Netherlands",
            "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è": "Portugal",
            "–®–≤–µ—Ü–∏—è": "Sweden",
            "–ù–æ—Ä–≤–µ–≥–∏—è": "Norway",
            "–§–∏–Ω–ª—è–Ω–¥–∏—è": "Finland",
            "–ê–≤—Å—Ç—Ä–∏—è": "Austria",
            "–®–≤–µ–π—Ü–∞—Ä–∏—è": "Switzerland",
            "–Ø–ø–æ–Ω–∏—è": "Japan",
            "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "South Korea",
            "–ö–∏—Ç–∞–π": "China",
            "–ò–Ω–¥–∏—è": "India",
            "–ò–∑—Ä–∞–∏–ª—å": "Israel",
            "–¢—É—Ä—Ü–∏—è": "Turkey"
        }

        for key, value in place_synonyms.items():
            rest = rest.replace(key, value)

        try:
            coords = [float(x.strip()) for x in rest.split(",")]
            if len(coords) != 2:
                raise ValueError()
            lat, lon = coords
        except:
            loc = geolocator.geocode(rest, timeout=10)
            if not loc:
                raise ValueError("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            lat, lon = loc.latitude, loc.longitude

        event_type, details = get_event_analysis(lat, lon, dt)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {event_type}")
        await update.message.reply_text(f"{event_type}\n{details}", parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manual_search: {e}")
        await update.message.reply_text(
            f"‚ö†Ô∏è {str(e)}\n\n–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>2025</code>\n"
            "‚Ä¢ <code>5 –∏—é–ª—è 1947, Roswell, USA</code>\n"
            "‚Ä¢ <code>5 –∏—é–ª—è 1947, 33.3943, -104.5230</code>",
            parse_mode="HTML"
        )

# === –ó–ê–ü–£–°–ö ===

if __name__ == "__main__":
    TOKEN = os.environ["TELEGRAM_TOKEN"]
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_continent)],
            STATE_SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_type)],
            STATE_ENTER_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_year)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'\d+\s+\w+,\s+[\w\s]+'), manual_search))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    def run_flask():
        flask_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))
    thread = Thread(target=run_flask)
    thread.daemon = True
    thread.start()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()