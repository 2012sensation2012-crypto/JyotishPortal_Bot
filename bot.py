import os
import datetime
import pytz
import requests
from astral import LocationInfo
from astral.sun import sun
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import swisseph as swe
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SWISS EPH (—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤) ===
# –°–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–º—è—Ç–∏ (–Ω–∞ Render.com –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π ln -s)
# –ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—Ä–∞—Ç—å.
# swisseph –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ—Ç sepl_*.se1, semo_*.se1 –∏ —Ç.–¥.

# –ú—ã —Å–æ–∑–¥–∞–¥–∏–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è os.symlink –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É ln.
# –ù–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é ‚Äî —ç—Ç–æ —Å–ª–æ–∂–Ω–æ.
# –õ—É—á—à–µ –≤—Å—ë-—Ç–∞–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É ln -s –Ω–∞ Render.com, –∫–∞–∫ —è –ø–∏—Å–∞–ª.

# –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —ç—Ñ–µ–º–µ—Ä–∏–¥
swe.set_ephe_path("ephemeris")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞, –Ω–æ –Ω–∞ GitHub –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ–¥ –¥—Ä—É–≥–∏–º–∏.
# –ù–∞ Render.com –º—ã –∏—Ö –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —á–µ—Ä–µ–∑ ln -s.

geolocator = Nominatim(user_agent="ufo_portal_bot")
tf = TimezoneFinder()

def get_kp_index(date):
    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ Kp-–∏–Ω–¥–µ–∫—Å–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ API)
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 2, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        return 2.0
    except:
        return 2.0

def get_nakshatra(moon_lon):
    nakshatras = [("–ê—à–≤–∏–Ω–∏", 0.0, 13.2), ("–®–∞—Ç–∞–±—Ö–∏—à–∞", 306.4, 320.0), ("–ú—É–ª–∞", 240.0, 253.2)]
    for name, start, end in nakshatras:
        if start <= moon_lon < end:
            return name
    return None

def is_night(lat, lon, dt):
    try:
        tz_str = tf.timezone_at(lat=lat, lng=lon) or "UTC"
        local_tz = pytz.timezone(tz_str)
        local_dt = dt.astimezone(local_tz)
        city = LocationInfo("", "", tz_str, lat, lon)
        s = sun(city.observer, date=local_dt.date())
        return local_dt < s["dawn"] or local_dt > s["dusk"]
    except:
        return True

def classify_event(lat, lon, dt):
    jd = swe.julday(dt.year, dt.month, dt.day, dt.hour + dt.minute/60.0)
    sun_pos = swe.calc_ut(jd, swe.SUN)[0][0] % 360
    moon_pos = swe.calc_ut(jd, swe.MOON)[0][0] % 360
    rahu_pos = swe.calc_ut(jd, swe.MEAN_NODE)[0][0] % 360

    lon_360 = lon if lon >= 0 else 360 + lon
    cond1 = min(abs(lon_360 - rahu_pos), abs(lon_360 - rahu_pos + 360), abs(lon_360 - rahu_pos - 360)) <= 3
    angle = (moon_pos - sun_pos) % 360
    in_8th = 210 <= angle <= 240
    in_12th = 330 <= angle <= 360
    nakshatra = get_nakshatra(moon_pos)
    in_mula = nakshatra == "–ú—É–ª–∞"
    cond2 = in_8th or in_12th or in_mula
    cond3 = nakshatra in ["–ê—à–≤–∏–Ω–∏", "–®–∞—Ç–∞–±—Ö–∏—à–∞", "–ú—É–ª–∞"]
    cond4 = 25 <= abs(lat) <= 50
    cond5 = is_night(lat, lon, dt)
    kp = get_kp_index(dt.date())
    cond6 = kp <= 5

    if cond1 and cond2 and cond3 and cond4 and cond5 and cond6:
        return "‚úÖ –¢–∏–ø 1 (–ì–µ–æ–ø–æ—Ä—Ç–∞–ª)", f"–†–∞—Ö—É: {rahu_pos:.1f}¬∞\n–õ—É–Ω–∞: {moon_pos:.1f}¬∞ ({nakshatra})\nKp: {kp}\n–ù–æ—á—å: {'–î–∞' if cond5 else '–ù–µ—Ç'}"
    elif (in_8th or in_12th) and cond3 and cond6:
        return "üå§ –¢–∏–ø 2 (–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π)", f"–õ—É–Ω–∞: {moon_pos:.1f}¬∞ ({nakshatra})\nKp: {kp}"
    elif cond1 and (in_8th or in_12th or in_mula) and (not cond3 or kp >= 6):
        return "üí• –¢–∏–ø 4 (–ê–≤–∞—Ä–∏–π–Ω—ã–π)", f"Kp: {kp}\n–ù–∞–∫—à–∞—Ç—Ä–∞: {nakshatra or '‚Äî'}"
    else:
        return "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã", f"–õ—É–Ω–∞: {moon_pos:.1f}¬∞ ({nakshatra or '‚Äî'})\n–†–∞—Ö—É: {rahu_pos:.1f}¬∞\nKp: {kp}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåå <b>–°–∏—Å—Ç–µ–º–∞ –ö–æ—Å–º–∏—á–µ—Å–∫–æ–π –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ v2.0</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å: <code>5 –∏—é–ª—è 1947, Roswell, USA</code>\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å —Ç–æ—á–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
        parse_mode="HTML"
    )

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        if "," not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ")
        date_str, place = text.split(",", 1)
        date_str = date_str.strip()
        place = place.strip()

        months = {"—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,"–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12}
        parts = date_str.split()
        if len(parts) == 3:
            day, month_str, year = int(parts[0]), parts[1].lower(), int(parts[2])
            month = months.get(month_str, 1)
            dt = datetime.datetime(year, month, day, 12, tzinfo=pytz.utc)
        else:
            raise ValueError("–¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç: 5 –∏—é–ª—è 1947")

        loc = geolocator.geocode(place, timeout=10)
        if not loc:
            raise ValueError("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        result, details = classify_event(loc.latitude, loc.longitude, dt)
        await update.message.reply_text(f"{result}\n\n{details}", parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è {str(e)}\n–ü—Ä–∏–º–µ—Ä: 5 –∏—é–ª—è 1947, Roswell, USA")

if __name__ == "__main__":
    TOKEN = os.environ["TELEGRAM_TOKEN"]
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))
    app.run_polling()