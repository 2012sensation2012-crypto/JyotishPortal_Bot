import os
import datetime
import pytz
import requests
from astral import LocationInfo
from astral.sun import sun
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import swisseph as swe
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SWISS EPH ===
ephemeris_path = os.path.join(os.path.dirname(__file__), "ephemeris")
swe.set_ephe_path(ephemeris_path)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è geopy –∏ –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
geolocator = Nominatim(user_agent="ufo_portal_bot")
tf = TimezoneFinder()

# –°–æ–∑–¥–∞—ë–º Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    return "Bot is alive! üõ∏"

def get_kp_index(date):
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API NOAA
        return 2.0
    except:
        return 2.0

def get_nakshatra(moon_lon):
    nakshatras = [
        ("–ê—à–≤–∏–Ω–∏", 0.0, 13.2),
        ("–®–∞—Ç–∞–±—Ö–∏—à–∞", 306.4, 320.0),
        ("–ú—É–ª–∞", 240.0, 253.2),
        ("–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", 333.2, 346.4),
        ("–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", 270.0, 283.2),
        ("–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", 283.2, 296.4),
        ("–®—Ä–∞–≤–∞–Ω–∞", 296.4, 309.6),
        ("–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", 309.6, 322.8),
        ("–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏", 322.8, 336.0)
    ]
    for name, start, end in nakshatras:
        if start <= moon_lon < end:
            return name
    return None

def is_night(lat, lon, dt):
    try:
        tz_str = tf.timezone_at(lat=lat, lng=lon) or "UTC"
        local_tz = pytz.timezone(tz_str)
        local_dt = dt.astimezone(local_tz)
        city = LocationInfo("", "", tz_str, lat, lon)
        s = sun(city.observer, date=local_dt.date())
        return local_dt < s["dawn"] or local_dt > s["dusk"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ—á–∏: {e}")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–æ—á—å

def classify_event(lat, lon, dt):
    jd = swe.julday(dt.year, dt.month, dt.day, dt.hour + dt.minute/60.0)
    sun_pos = swe.calc_ut(jd, swe.SUN)[0][0] % 360
    moon_pos = swe.calc_ut(jd, swe.MOON)[0][0] % 360
    rahu_pos = swe.calc_ut(jd, swe.MEAN_NODE)[0][0] % 360

    lon_360 = lon if lon >= 0 else 360 + lon
    cond1 = min(abs(lon_360 - rahu_pos), abs(lon_360 - rahu_pos + 360), abs(lon_360 - rahu_pos - 360)) <= 3
    angle = (moon_pos - sun_pos) % 360
    in_8th = 210 <= angle <= 240
    in_12th = 330 <= angle <= 360
    nakshatra = get_nakshatra(moon_pos)
    in_mula = nakshatra == "–ú—É–ª–∞"
    cond2 = in_8th or in_12th or in_mula
    cond3 = nakshatra in ["–ê—à–≤–∏–Ω–∏", "–®–∞—Ç–∞–±—Ö–∏—à–∞", "–ú—É–ª–∞", "–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", "–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", "–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", "–®—Ä–∞–≤–∞–Ω–∞", "–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", "–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏"]
    cond4 = 25 <= abs(lat) <= 50
    cond5 = is_night(lat, lon, dt)
    kp = get_kp_index(dt.date())
    cond6 = kp <= 5

    if (cond1 or cond3 or cond5) and cond2 and cond4 and cond6:
        return "‚úÖ –¢–∏–ø 1 (–ì–µ–æ–ø–æ—Ä—Ç–∞–ª)"
    elif (in_8th or in_12th) and cond3 and cond6:
        return "üå§ –¢–∏–ø 2 (–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π)"
    elif cond1 and (in_8th or in_12th or in_mula) and (not cond3 or kp >= 6):
        return "üí• –¢–∏–ø 4 (–ê–≤–∞—Ä–∏–π–Ω—ã–π)"
    elif cond6 and cond5:
        return "üëÅÔ∏è –¢–∏–ø 5 (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π)"
    elif cond5 and cond6:
        return "üëΩ –¢–∏–ø 6 (–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π)"
    else:
        return "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåå <b>–°–∏—Å—Ç–µ–º–∞ –ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω –ø–æ—Ä—Ç–∞–ª–æ–≤ v3.1</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å:\n"
        "‚Ä¢ <code>/help</code> ‚Äî —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
        "‚Ä¢ <code>5 –∏—é–ª—è 1947, Roswell, USA</code> ‚Äî —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫\n"
        "‚Ä¢ <code>2026</code> ‚Äî –º–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –±—É–¥—É—â–∏—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤\n"
        "‚Ä¢ <code>1947</code> ‚Äî –º–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤",
        parse_mode="HTML"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n\n"
        "1Ô∏è‚É£ <b>–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å: <code>5 –∏—é–ª—è 1947, Roswell, USA</code>\n"
        "–ë–æ—Ç –≤—ã–¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.\n\n"
        "2Ô∏è‚É£ <b>–ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –±—É–¥—É—â–∏—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>2026</code>)\n"
        "–ë–æ—Ç –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Ä—Ç–∞–ª–æ–≤.\n"
        "–ü–æ–¥–ø–∏—Å—å: <i>(–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –∑–∞–º–µ—á–µ–Ω–æ –ª—é–¥—å–º–∏)</i>\n\n"
        "3Ô∏è‚É£ <b>–ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1947</code>)\n"
        "–ë–æ—Ç –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Ä—Ç–∞–ª–æ–≤.\n"
        "–ü–æ–¥–ø–∏—Å—å: <i>(–°–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –∑–∞–º–µ—á–µ–Ω–æ –ª—é–¥—å–º–∏)</i>",
        parse_mode="HTML"
    )

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.startswith("/"):
        return  # –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≥–æ–¥–æ–º (4 —Ü–∏—Ñ—Ä—ã)
    if text.isdigit() and len(text) == 4:
        year = int(text)
        if year > 2025:  # –ë—É–¥—É—â–∏–µ –ø–æ—Ä—Ç–∞–ª—ã
            await search_future_portals(update, context, year)
        else:  # –ü—Ä–æ—à–ª—ã–µ –ø–æ—Ä—Ç–∞–ª–æ–≤
            await search_past_portals(update, context, year)
    else:
        await manual_search(update, context)

async def manual_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        if "," not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É –∑–∞–ø—è—Ç–æ–π
        parts = text.split(",", 1)
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω—É–∂–Ω–æ: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ")

        date_str = parts[0].strip()
        rest = parts[1].strip()

        months = {
            # –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
            "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
            "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
            "january":1, "february":2, "march":3, "april":4, "may":5, "june":6,
            "july":7, "august":8, "september":9, "october":10, "november":11, "december":12,
            # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è
            "jan":1, "feb":2, "mar":3, "apr":4, "may":5, "jun":6,
            "jul":7, "aug":8, "sep":9, "oct":10, "nov":11, "dec":12
        }
        date_parts = date_str.split()
        if len(date_parts) == 3:
            day, month_str, year = int(date_parts[0]), date_parts[1].lower().rstrip('.'), int(date_parts[2])
            month = months.get(month_str, 1)
            dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)  # 15:00 UTC ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ç—Ä—É –≤ –°–®–ê
        else:
            raise ValueError("–¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç: 5 –∏—é–ª—è 1947")

        # –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –≥–µ–æ–∫–æ–¥–µ—Ä–∞
        place_synonyms = {
            # –°–®–ê
            "–†–æ–∑—É—ç–ª–ª": "Roswell",
            "–°–®–ê": "USA",
            "–ù—å—é-–ô–æ—Ä–∫": "New York",
            "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å": "Los Angeles",
            "–ß–∏–∫–∞–≥–æ": "Chicago",
            "–•—å—é—Å—Ç–æ–Ω": "Houston",
            "–§–∏–Ω–∏–∫—Å": "Phoenix",
            "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è": "Philadelphia",
            "–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ": "San Antonio",
            "–°–∞–Ω-–îiego": "San Diego",
            "–î–∞–ª–ª–∞—Å": "Dallas",
            "–°–∞–Ω-–•–æ—Å–µ": "San Jose",
            "–û—Å—Ç–∏–Ω": "Austin",
            "–î–∂–µ–∫—Å–æ–Ω–≤–∏–ª–ª": "Jacksonville",
            "–§–æ—Ä—Ç-–£—ç—Ä—Ç": "Fort Worth",
            "–ö–æ–ª–∞–º–±—É—Å": "Columbus",
            "–ò–Ω–¥–∏–∞–Ω–∞–ø–æ–ª–∏—Å": "Indianapolis",
            "–®–∞—Ä–ª–æ—Ç—Ç": "Charlotte",
            "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ": "San Francisco",
            "–°–∏—ç—Ç–ª": "Seattle",
            "–î–µ–Ω–≤–µ—Ä": "Denver",
            "–í–∞—à–∏–Ω–≥—Ç–æ–Ω": "Washington",
            "–ë–æ—Å—Ç–æ–Ω": "Boston",
            "–≠–ª-–ü–∞—Å–æ": "El Paso",
            "–î–µ—Ç—Ä–æ–π—Ç": "Detroit",
            "–ú–µ–º—Ñ–∏—Å": "Memphis",
            "–ü–æ—Ä—Ç–ª–µ–Ω–¥": "Portland",
            "–õ–∞—Å-–í–µ–≥–∞—Å": "Las Vegas",
            "–ú–∏–ª—É–æ–∫–∏": "Milwaukee",
            "–ê–ª—å–±—É–∫–µ—Ä–∫–µ": "Albuquerque",
            "–¢—É—Å–æ–Ω": "Tucson",
            "–§—Ä–µ—Å–Ω–æ": "Fresno",
            "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ": "Sacramento",
            "–õ–æ–Ω–≥-–ë–∏—á": "Long Beach",
            "–ö–∞–Ω–∑–∞—Å-–°–∏—Ç–∏": "Kansas City",
            "–ú–µ—Å–∞": "Mesa",
            "–ê—Ç–ª–∞–Ω—Ç–∞": "Atlanta",
            "–ú–∞–π–∞–º–∏": "Miami",
            "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏": "Oklahoma City",
            "–ù—ç—à–≤–∏–ª–ª": "Nashville",
            "–õ—É–∏—Å–≤–∏–ª–ª": "Louisville",
            "–ë–∞–ª—Ç–∏–º–æ—Ä": "Baltimore",
            # –ö–∞–Ω–∞–¥–∞
            "–¢–æ—Ä–æ–Ω—Ç–æ": "Toronto",
            "–ú–æ–Ω—Ä–µ–∞–ª—å": "Montreal",
            "–ö–∞–ª–≥–∞—Ä–∏": "Calgary",
            "–û—Ç—Ç–∞–≤–∞": "Ottawa",
            "–≠–¥–º–æ–Ω—Ç–æ–Ω": "Edmonton",
            "–ú–∏—Å—Å–∏—Å—Å–∞–≥–∞": "Mississauga",
            "–í–∏–Ω–Ω–∏–ø–µ–≥": "Winnipeg",
            "–í–∞–Ω–∫—É–≤–µ—Ä": "Vancouver",
            "–ë—Ä–∞–º–ø—Ç–æ–Ω": "Brampton",
            "–ì–∞–º–∏–ª—å—Ç–æ–Ω": "Hamilton",
            # –ú–µ–∫—Å–∏–∫–∞
            "–ú–µ—Ö–∏–∫–æ": "Mexico City",
            "–ì–≤–∞–¥–∞–ª–∞—Ö–∞—Ä–∞": "Guadalajara",
            "–ú–æ–Ω—Ç–µ—Ä—Ä–µ–π": "Monterrey",
            "–ü—É—ç–±–ª–∞": "Puebla",
            "–¢–∏—É–∞–Ω–∞": "Tijuana",
            "–õ–µ–æ–Ω": "Leon",
            "–•—É–∞—Ä–µ—Å": "Juarez",
            "–°–∞–Ω-–õ—É–∏—Å-–ü–æ—Ç–æ—Å–∏": "San Luis Potosi",
            "–ú–µ—Ä–∏–¥–∞": "Merida",
            "–ö–∞–Ω–∫—É–Ω": "Cancun",
            # –ï–≤—Ä–æ–ø–∞
            "–õ–æ–Ω–¥–æ–Ω": "London",
            "–ü–∞—Ä–∏–∂": "Paris",
            "–ë–µ—Ä–ª–∏–Ω": "Berlin",
            "–ú–∞–¥—Ä–∏–¥": "Madrid",
            "–†–∏–º": "Rome",
            "–ê–º—Å—Ç–µ—Ä–¥–∞–º": "Amsterdam",
            "–ë—Ä—é—Å—Å–µ–ª—å": "Brussels",
            "–í–µ–Ω–∞": "Vienna",
            "–ë—É–¥–∞–ø–µ—à—Ç": "Budapest",
            "–í–∞—Ä—à–∞–≤–∞": "Warsaw",
            "–ü—Ä–∞–≥–∞": "Prague",
            "–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω": "Copenhagen",
            "–°—Ç–æ–∫–≥–æ–ª—å–º": "Stockholm",
            "–û—Å–ª–æ": "Oslo",
            "–•–µ–ª—å—Å–∏–Ω–∫–∏": "Helsinki",
            "–î—É–±–ª–∏–Ω": "Dublin",
            "–õ–∏—Å—Å–∞–±–æ–Ω": "Lisbon",
            "–ê—Ñ–∏–Ω—ã": "Athens",
            "–ë—É—Ö–∞—Ä–µ—Å—Ç": "Bucharest",
            "–°–æ—Ñ–∏—è": "Sofia",
            "–ó–∞–≥—Ä–µ–±": "Zagreb",
            "–ë–µ–ª–≥—Ä–∞–¥": "Belgrade",
            "–ö–∏–µ–≤": "Kyiv",
            "–ú–∏–Ω—Å–∫": "Minsk",
            "–ú–æ—Å–∫–≤–∞": "Moscow",
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Novosibirsk",
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "Yekaterinburg",
            "–ö–∞–∑–∞–Ω—å": "Kazan",
            "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "Nizhny Novgorod",
            "–ß–µ–ª—è–±–∏–Ω—Å–∫": "Chelyabinsk",
            "–°–∞–º–∞—Ä–∞": "Samara",
            "–û–º—Å–∫": "Omsk",
            "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "Rostov-on-Don",
            "–£—Ñ–∞": "Ufa",
            "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk",
            "–í–æ—Ä–æ–Ω–µ–∂": "Voronezh",
            "–ü–µ—Ä–º—å": "Perm",
            "–í–æ–ª–≥–æ–≥—Ä–∞–¥": "Volgograd",
            # –ê–∑–∏—è
            "–¢–æ–∫–∏–æ": "Tokyo",
            "–î–µ–ª–∏": "Delhi",
            "–®–∞–Ω—Ö–∞–π": "Shanghai",
            "–ü–µ–∫–∏–Ω": "Beijing",
            "–ú—É–º–±–∞–∏": "Mumbai",
            "–û—Å–∞–∫–∞": "Osaka",
            "–°–µ—É–ª": "Seoul",
            "–°—Ç–∞–º–±—É–ª": "Istanbul",
            "–¢–µ–≥–µ—Ä–∞–Ω": "Tehran",
            "–ë–∞–Ω–≥–∫–æ–∫": "Bangkok",
            "–ö—É–∞–ª–∞-–õ—É–º–ø—É—Ä": "Kuala Lumpur",
            "–ú–∞–Ω–∏–ª–∞": "Manila",
            "–î–∂–∞–∫–∞—Ä—Ç–∞": "Jakarta",
            "–°–∏–Ω–≥–∞–ø—É—Ä": "Singapore",
            "–•–∞–Ω–æ–π": "Hanoi",
            "–î—É–±–∞–π": "Dubai",
            "–≠—Ä-–†–∏—è–¥": "Riyadh",
            "–ö–∞–∏—Ä": "Cairo",
            "–ô–æ—Ö–∞–Ω–Ω–µ—Å–±—É—Ä–≥": "Johannesburg",
            "–ù–∞–π—Ä–æ–±–∏": "Nairobi",
            "–ö–µ–π–ø—Ç–∞—É–Ω": "Cape Town",
            "–õ–∞–≥–æ—Å": "Lagos",
            "–ê–¥–¥–∏—Å-–ê–±–µ–±–∞": "Addis Ababa",
            "–¢—Ä–∏–ø–æ–ª–∏": "Tripoli",
            "–ê–ª–∂–∏—Ä": "Algiers",
            "–ö–∞—Å–∞–±–ª–∞–Ω–∫–∞": "Casablanca",
            "–¢—É–Ω–∏—Å": "Tunis",
            "–î–∞–∫–∞—Ä": "Dakar",
            "–ê–∫–∫—Ä–∞": "Accra",
            "–õ—É–∞–Ω–¥–∞": "Luanda",
            "–•–∞—Ä–∞—Ä–µ": "Harare",
            "–õ—É—Å–∞–∫–∞": "Lusaka",
            "–ú–∞–ø—É—Ç—É": "Maputo",
            "–ê–Ω—Ç–∞–Ω–∞–Ω–∞—Ä–∏–≤—É": "Antananarivo",
            "–ü–æ—Ä—Ç-–õ—É–∏": "Port Louis",
            "–ú–æ—Ä–æ–Ω–∏": "Moroni",
            "–í–∏–∫—Ç–æ—Ä–∏—è": "Victoria",
            # –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
            "–†–µ–Ω–¥–ª–µ—à–µ–º": "Rendlesham",
            "–ö–∞–Ω–∞–¥–∞": "Canada",
            "–ú–µ–∫—Å–∏–∫–∞": "Mexico",
            # –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
            "–ë—Ä–∞–∑–∏–ª–∏—è": "Brazil",
            "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "Argentina",
            "–ß–∏–ª–∏": "Chile",
            "–ü–µ—Ä—É": "Peru",
            "–ö–æ–ª—É–º–±–∏—è": "Colombia",
            "–í–µ–Ω–µ—Å—É—ç–ª–∞": "Venezuela",
            # –û–∫–µ–∞–Ω–∏—è
            "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "Australia",
            "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è": "New Zealand",
            # –ï–≤—Ä–æ–ø–∞
            "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "United Kingdom",
            "–§—Ä–∞–Ω—Ü–∏—è": "France",
            "–ì–µ—Ä–º–∞–Ω–∏—è": "Germany",
            "–ò—Ç–∞–ª–∏—è": "Italy",
            "–ò—Å–ø–∞–Ω–∏—è": "Spain",
            "–†–æ—Å—Å–∏—è": "Russia",
            "–£–∫—Ä–∞–∏–Ω–∞": "Ukraine",
            "–ë–µ–ª—å–≥–∏—è": "Belgium",
            "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "Netherlands",
            "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è": "Portugal",
            "–®–≤–µ—Ü–∏—è": "Sweden",
            "–ù–æ—Ä–≤–µ–≥–∏—è": "Norway",
            "–§–∏–Ω–ª—è–Ω–¥–∏—è": "Finland",
            "–ê–≤—Å—Ç—Ä–∏—è": "Austria",
            "–®–≤–µ–π—Ü–∞—Ä–∏—è": "Switzerland",
            # –ê–∑–∏—è
            "–Ø–ø–æ–Ω–∏—è": "Japan",
            "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "South Korea",
            "–ö–∏—Ç–∞–π": "China",
            "–ò–Ω–¥–∏—è": "India",
            "–ò–∑—Ä–∞–∏–ª—å": "Israel",
            "–¢—É—Ä—Ü–∏—è": "Turkey"
        }

        # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
        for key, value in place_synonyms.items():
            rest = rest.replace(key, value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ rest –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
        try:
            coords = [float(x.strip()) for x in rest.split(",")]
            if len(coords) != 2:
                raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞")
            lat, lon = coords
            loc = None  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º geocoder –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º geocoder
            loc = geolocator.geocode(rest, timeout=10)
            if not loc:
                raise ValueError("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            lat, lon = loc.latitude, loc.longitude

        result, details = classify_event(lat, lon, dt)
        await update.message.reply_text(f"{result}\n{details}", parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è {str(e)}\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ 5 –∏—é–ª—è 1947, Roswell, USA\n"
            "‚Ä¢ 5 –∏—é–ª—è 1947, –†–æ–∑—É—ç–ª–ª, –°–®–ê\n"
            "‚Ä¢ 5 –∏—é–ª—è 1947, 33.3943, -104.5230",
            parse_mode="HTML"
        )

async def search_future_portals(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int):
    await update.message.reply_text(f"‚è≥ –ò—â—É –±—É–¥—É—â–∏–µ –ø–æ—Ä—Ç–∞–ª—ã –≤ {year} –≥–æ–¥—É...")

    results = []
    for month in range(1, 13):
        for day in range(1, 32):
            try:
                dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
                lat = 35.1495  # –®–∏—Ä–æ—Ç–∞ –ú–µ–º—Ñ–∏—Å–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
                lon = -89.9764  # –î–æ–ª–≥–æ—Ç–∞ –ú–µ–º—Ñ–∏—Å–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)

                event_type = classify_event(lat, lon, dt)
                if event_type != "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã":
                    results.append(f"{day:02d}.{month:02d}.{year} ‚Äî {event_type}")

            except:
                continue

    if results:
        response = "\n".join(results) + "\n\n<i>(–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –∑–∞–º–µ—á–µ–Ω–æ –ª—é–¥—å–º–∏)</i>"
        await update.message.reply_text(response, parse_mode="HTML")
    else:
        await update.message.reply_text(f"‚ùå –í {year} –≥–æ–¥—É –Ω–µ—Ç –ø–æ—Ä—Ç–∞–ª–æ–≤.")

async def search_past_portals(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int):
    await update.message.reply_text(f"‚è≥ –ò—â—É –ø—Ä–æ—à–ª—ã–µ –ø–æ—Ä—Ç–∞–ª—ã –≤ {year} –≥–æ–¥—É...")

    results = []
    for month in range(1, 13):
        for day in range(1, 32):
            try:
                dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
                lat = 35.1495  # –®–∏—Ä–æ—Ç–∞ –ú–µ–º—Ñ–∏—Å–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
                lon = -89.9764  # –î–æ–ª–≥–æ—Ç–∞ –ú–µ–º—Ñ–∏—Å–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)

                event_type = classify_event(lat, lon, dt)
                if event_type != "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã":
                    results.append(f"{day:02d}.{month:02d}.{year} ‚Äî {event_type}")

            except:
                continue

    if results:
        response = "\n".join(results) + "\n\n<i>(–°–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –∑–∞–º–µ—á–µ–Ω–æ –ª—é–¥—å–º–∏)</i>"
        await update.message.reply_text(response, parse_mode="HTML")
    else:
        await update.message.reply_text(f"‚ùå –í {year} –≥–æ–¥—É –Ω–µ—Ç –ø–æ—Ä—Ç–∞–ª–æ–≤.")

if __name__ == "__main__":
    TOKEN = os.environ["TELEGRAM_TOKEN"]
    app_bot = Application.builder().token(TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("help", help_command))
    app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    def run_flask():
        flask_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))
    thread = Thread(target=run_flask)
    thread.daemon = True
    thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app_bot.run_polling()
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import time
        while True:
            time.sleep(60)