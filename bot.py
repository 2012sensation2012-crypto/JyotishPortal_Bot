import os
import datetime
import pytz
from astral import LocationInfo
from astral.sun import sun
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import swisseph as swe
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from functools import lru_cache

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
ephemeris_path = os.path.join(os.path.dirname(__file__), "ephemeris")
swe.set_ephe_path(ephemeris_path)
geolocator = Nominatim(user_agent="ufo_portal_bot")
tf = TimezoneFinder()
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    return "Bot is alive! üõ∏"

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_kp_index(date):
    return 2.0

def get_nakshatra(moon_lon):
    nakshatras = [
        ("–ê—à–≤–∏–Ω–∏", 0.0, 13.2),
        ("–®–∞—Ç–∞–±—Ö–∏—à–∞", 306.4, 320.0),
        ("–ú—É–ª–∞", 240.0, 253.2),
        ("–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", 333.2, 346.4),
        ("–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", 270.0, 283.2),
        ("–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", 283.2, 296.4),
        ("–®—Ä–∞–≤–∞–Ω–∞", 296.4, 309.6),
        ("–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", 309.6, 322.8),
        ("–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏", 322.8, 336.0)
    ]
    for name, start, end in nakshatras:
        if start <= moon_lon < end:
            return name
    return "‚Äî"

def is_night(lat, lon, dt):
    try:
        tz_str = tf.timezone_at(lat=lat, lng=lon) or "UTC"
        local_tz = pytz.timezone(tz_str)
        local_dt = dt.astimezone(local_tz)
        city = LocationInfo("", "", tz_str, lat, lon)
        s = sun(city.observer, date=local_dt.date())
        return local_dt < s["dawn"] or local_dt > s["dusk"]
    except:
        return True

@lru_cache(maxsize=1000)
def classify_event_cached(lat, lon, date_str):
    dt = datetime.datetime.fromisoformat(date_str).replace(tzinfo=pytz.UTC)
    jd = swe.julday(dt.year, dt.month, dt.day, dt.hour + dt.minute/60.0)
    sun_pos = swe.calc_ut(jd, swe.SUN)[0][0] % 360
    moon_pos = swe.calc_ut(jd, swe.MOON)[0][0] % 360
    rahu_pos = swe.calc_ut(jd, swe.MEAN_NODE)[0][0] % 360

    lon_360 = lon if lon >= 0 else 360 + lon
    rahu_diff = min(abs(lon_360 - rahu_pos), abs(lon_360 - rahu_pos + 360), abs(lon_360 - rahu_pos - 360))
    cond1 = rahu_diff <= 3
    angle = (moon_pos - sun_pos) % 360
    in_8th = 210 <= angle <= 240
    in_12th = 330 <= angle <= 360
    nakshatra = get_nakshatra(moon_pos)
    in_mula = nakshatra == "–ú—É–ª–∞"
    cond2 = in_8th or in_12th or in_mula
    cond3 = nakshatra in ["–ê—à–≤–∏–Ω–∏", "–®–∞—Ç–∞–±—Ö–∏—à–∞", "–ú—É–ª–∞", "–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", "–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", "–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", "–®—Ä–∞–≤–∞–Ω–∞", "–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", "–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏"]
    cond4 = 25 <= abs(lat) <= 50
    cond5 = is_night(lat, lon, dt)
    kp = get_kp_index(dt.date())
    cond6 = kp <= 5

    if (cond1 or cond3 or cond5) and cond2 and cond4 and cond6:
        event_type = "‚úÖ –¢–∏–ø 1 (–ì–µ–æ–ø–æ—Ä—Ç–∞–ª)"
    elif (in_8th or in_12th) and cond3 and cond6:
        event_type = "üå§ –¢–∏–ø 2 (–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π)"
    elif cond1 and (in_8th or in_12th or in_mula) and kp >= 6:
        event_type = "üí• –¢–∏–ø 4 (–ê–≤–∞—Ä–∏–π–Ω—ã–π)"
    elif cond5 and cond6:
        event_type = "üëÅÔ∏è –¢–∏–ø 5 (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π)"
    else:
        event_type = "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã"

    details = (
        f"‚Ä¢ –ù–∞–∫—à–∞—Ç—Ä–∞: {nakshatra}\n"
        f"‚Ä¢ –î–æ–º –õ—É–Ω—ã: {'8-–π' if in_8th else '12-–π' if in_12th else '‚Äî'}\n"
        f"‚Ä¢ Rahu: {rahu_diff:.1f}¬∞ –æ—Ç –¥–æ–ª–≥–æ—Ç—ã\n"
        f"‚Ä¢ Kp: {kp} | –ù–æ—á—å: {'–î–∞' if cond5 else '–ù–µ—Ç'}"
    )
    return event_type, details

def classify_event(lat, lon, dt):
    return classify_event_cached(lat, lon, dt.isoformat())

# === –°–õ–û–í–ê–†–¨ –ö–õ–Æ–ß–ï–í–´–• –ó–û–ù ===
PLACE_SYNONYMS = {
    "–†–æ–∑—É—ç–ª–ª": "Roswell, New Mexico",
    "–ó–æ–Ω–∞ 51": "Rachel, Nevada",
    "–°–µ–¥–æ–Ω–∞": "Sedona, Arizona",
    "–¢—É–Ω–≥—É—Å–∫–∞": "60.9, 101.9",
    "–ú–∞—á—É-–ü–∏–∫—á—É": "Machu Picchu, Peru",
    "–ù–∞—Å–∫–∞": "Nazca, Peru",
    "–°—Ç–æ—É–Ω—Ö–µ–Ω–¥–∂": "Stonehenge, UK",
    "–ö–∞–π–ª–∞—Å": "Mount Kailash, Tibet",
    "–ë–µ—Ä–º—É–¥—ã": "25.0, -71.0",
    "–ü–∏—Ä–∞–º–∏–¥—ã": "Giza, Egypt",
}

MONTHS = {
    "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
    "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
    "jan":1,"feb":2,"mar":3,"apr":4,"may":5,"jun":6,
    "jul":7,"aug":8,"sep":9,"oct":10,"nov":11,"dec":12,
}

# === TELEGRAM ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåå <b>–°–∏—Å—Ç–µ–º–∞ –ò–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –ü–æ—Ä—Ç–∞–ª–æ–≤ v4.0</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ <code>5 –∏—é–ª—è 1947, –†–æ–∑—É—ç–ª–ª</code> ‚Äî –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ <code>2026</code> ‚Äî –ø–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞–ª–æ–≤ –≤ –≥–æ–¥—É\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∑–æ–Ω—ã: –†–æ–∑—É—ç–ª–ª, –ó–æ–Ω–∞ 51, –¢—É–Ω–≥—É—Å–∫–∞, –ú–∞—á—É-–ü–∏–∫—á—É, –ö–∞–π–ª–∞—Å –∏ –¥—Ä.",
        parse_mode="HTML"
    )

async def manual_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        if "," not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç: <code>–¥–∞—Ç–∞, –º–µ—Å—Ç–æ</code>")

        date_part, loc_part = [x.strip() for x in text.split(",", 1)]
        words = date_part.split()
        if len(words) != 3:
            raise ValueError("–§–æ—Ä–º–∞—Ç: <code>5 –∏—é–ª—è 1947</code>")

        day = int(words[0])
        month = MONTHS.get(words[1].lower().rstrip('.'), 1)
        year = int(words[2])
        dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)

        for ru, en in PLACE_SYNONYMS.items():
            loc_part = loc_part.replace(ru, en)

        try:
            coords = [float(x) for x in loc_part.split(",")]
            if len(coords) != 2:
                raise ValueError()
            lat, lon = coords
        except:
            loc = geolocator.geocode(loc_part, timeout=10)
            if not loc:
                raise ValueError("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            lat, lon = loc.latitude, loc.longitude

        event_type, _ = classify_event(lat, lon, dt)
        await update.message.reply_text(event_type, parse_mode="HTML")

    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è {str(e)}\n\n–ü—Ä–∏–º–µ—Ä: <code>5 –∏—é–ª—è 1947, –†–æ–∑—É—ç–ª–ª</code>",
            parse_mode="HTML"
        )

async def search_portals_by_year(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int):
    await update.message.reply_text(f"‚è≥ –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞–ª–æ–≤ –≤ {year} –≥–æ–¥—É...")
    lat, lon = 33.3943, -104.5230  # –†–æ–∑—É—ç–ª–ª
    results = []

    for month in range(1, 13):
        for day in range(1, 32):
            try:
                dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
                event_type, details = classify_event(lat, lon, dt)
                if event_type != "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã":
                    results.append(f"<b>{day:02d}.{month:02d}.{year}</b>\n{event_type}\n{details}\n")
            except:
                continue

    if not results:
        await update.message.reply_text(f"‚ùå –í {year} –≥–æ–¥—É –ø–æ—Ä—Ç–∞–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        return

    full = "\n".join(results) + f"\n<i>({('–ë—É–¥—É—â–µ–µ' if year > datetime.datetime.now().year else '–ü—Ä–æ—à–ª–æ–µ')} —Å–æ–±—ã—Ç–∏–µ)</i>"
    for i in range(0, len(full), 4000):
        await update.message.reply_text(full[i:i+4000], parse_mode="HTML")

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.isdigit() and len(text) == 4:
        await search_portals_by_year(update, context, int(text))
    else:
        await manual_search(update, context)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    TOKEN = os.environ["TELEGRAM_TOKEN"]
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))

    from threading import Thread
    Thread(target=lambda: flask_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000))), daemon=True).start()

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()