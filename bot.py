import os
import datetime
import pytz
import logging
import sys
import requests
from astral import LocationInfo
from astral.sun import sun
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import swisseph as swe
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes, 
    filters,
    ConversationHandler
)

from functools import lru_cache
from collections import defaultdict
from flask import Flask, jsonify, request

# –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è jyotish
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª jyotish.py –ª–µ–∂–∏—Ç –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ
try:
    from jyotish import calculate_astrology
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å jyotish: {e}")
    def calculate_astrology(lat, lon, dt):
        return {
            "moon": 0, "rahu": 0, "nakshatra": "‚Äî", "moon_house": 1,
            "houses": [], "sun": 0, "moon_sign": "‚Äî"
        }

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
(STATE_START, STATE_SELECT_CITY, STATE_SELECT_TYPE, STATE_ENTER_YEAR, STATE_SELECT_MONTH_BLOCK, STATE_ENTER_MONTH, STATE_SHOW_RESULTS) = range(7)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SWISS EPH ===
ephemeris_path = os.path.join(os.path.dirname(__file__), "ephemeris")
if os.path.exists(ephemeris_path):
    swe.set_ephe_path(ephemeris_path)
else:
    logger.warning("–ü–∞–ø–∫–∞ ephemeris –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. swisseph –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

geolocator = Nominatim(user_agent="ufo_portal_bot")
tf = TimezoneFinder()

# –°–æ–∑–¥–∞—ë–º Flask-—Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Bot is alive! üõ∏"

@flask_app.route('/health')
def health_check():
    return jsonify({"status": "ok", "service": "JyotishPortal_Bot"})

# –ö—ç—à –¥–ª—è Kp-–∏–Ω–¥–µ–∫—Å–∞ (–Ω–∞ 12 —á–∞—Å–æ–≤)
kp_cache = defaultdict(lambda: (None, 0))

def get_region_code(lat, lon):
    regions = [
        {"code": "MSK1", "lat": 55.7558, "lon": 37.6173, "name": "–ú–æ—Å–∫–≤–∞"},
        {"code": "SPB1", "lat": 59.9343, "lon": 30.3351, "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"},
        {"code": "NSK1", "lat": 55.0415, "lon": 82.9343, "name": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"},
        {"code": "EKB1", "lat": 56.8380, "lon": 60.6057, "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"},
        {"code": "NNG1", "lat": 56.8584, "lon": 60.6077, "name": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"},
        {"code": "KZN1", "lat": 55.7961, "lon": 49.1063, "name": "–ö–∞–∑–∞–Ω—å"},
        {"code": "KRD1", "lat": 45.0355, "lon": 38.9760, "name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"},
        {"code": "KRK1", "lat": 56.0184, "lon": 92.8679, "name": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"},
        {"code": "VVO1", "lat": 48.4943, "lon": 135.0687, "name": "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"}
    ]
    
    min_distance = float('inf')
    best_match = "MSK1"
    
    for region in regions:
        d_lat = abs(region["lat"] - lat)
        d_lon = abs(region["lon"] - lon)
        distance = d_lat + d_lon
        
        if distance < min_distance:
            min_distance = distance
            best_match = region["code"]
    
    return best_match

def get_kp_index(date):
    current_time = datetime.datetime.now().timestamp()
    
    if date in kp_cache and current_time - kp_cache[date][1] < 43200:
        cached_value, _ = kp_cache[date]
        if cached_value is not None:
            return cached_value
    
    try:
        region_code = "BPE3"
        
        if date.year < 2000:
            return 2.0
        
        date_str = date.strftime("%Y%m%d")
        url = f"https://xras.ru/txt/kp_{region_code}_{date_str}.json"  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª
        
        response = requests.get(url, timeout=10)
        
        if response.status_code != 200:
            logger.warning(f"xras.ru returned {response.status_code} for {date_str}")
            return 2.0

        data = response.json()
        target_date_str = date.strftime("%Y-%m-%d")

        for day_data in data.get("data", []):
            if day_data.get("time") == target_date_str:
                kp_values = []
                for key, val in day_data.items():
                    if key.startswith("h") and len(key) == 3:
                        if val == "null":
                            continue
                        try:
                            kp_val = float(val)
                            if 0 <= kp_val <= 9:
                                kp_values.append(kp_val)
                        except:
                            continue

                if kp_values:
                    avg_kp = sum(kp_values) / len(kp_values)
                    kp_cache[date] = (avg_kp, current_time)
                    return avg_kp

        logger.warning(f"Kp-–∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {target_date_str}")
        kp_cache[date] = (2.0, current_time)
        return 2.0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Kp-–∏–Ω–¥–µ–∫—Å–∞: {e}")
        kp_cache[date] = (2.0, current_time)
        return 2.0

def is_night(lat, lon, dt):
    try:
        tz_str = tf.timezone_at(lat=lat, lng=lon) or "UTC"
        local_tz = pytz.timezone(tz_str)
        local_dt = dt.astimezone(local_tz)
        
        city = LocationInfo("", "", tz_str, lat, lon)
        s = sun(city.observer, date=local_dt.date(), elevation=0)
        
        sunrise = s.get('sunrise', None)
        sunset = s.get('sunset', None)
        
        if sunrise is None or sunset is None:
            return True
            
        return local_dt < sunrise or local_dt > sunset

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ—á–∏: {e}")
        return True

def get_country(lat, lon):
    try:
        location = geolocator.reverse(f"{lat}, {lon}", language='en', timeout=5)
        if location and 'address' in location.raw:
            country = location.raw['address'].get('country', '‚Äî')
            country_map = {
                "United States": "–°–®–ê",
                "Russia": "–†–æ—Å—Å–∏—è",
                "United Kingdom": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                "Germany": "–ì–µ—Ä–º–∞–Ω–∏—è",
                "France": "–§—Ä–∞–Ω—Ü–∏—è",
                "Canada": "–ö–∞–Ω–∞–¥–∞",
                "Mexico": "–ú–µ–∫—Å–∏–∫–∞",
                "Japan": "–Ø–ø–æ–Ω–∏—è",
                "China": "–ö–∏—Ç–∞–π",
                "India": "–ò–Ω–¥–∏—è",
                "Brazil": "–ë—Ä–∞–∑–∏–ª–∏—è",
                "Australia": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
                "Ukraine": "–£–∫—Ä–∞–∏–Ω–∞",
                "Turkey": "–¢—É—Ä—Ü–∏—è",
                "Italy": "–ò—Ç–∞–ª–∏—è",
                "Spain": "–ò—Å–ø–∞–Ω–∏—è"
            }
            return country_map.get(country, country)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É: {e}")
    return "‚Äî"

@lru_cache(maxsize=365)
def get_event_analysis(lat, lon, dt):
    astro_data = calculate_astrology(lat, lon, dt)
    
    moon_pos = astro_data["moon"]
    rahu_pos = astro_data["rahu"]
    nakshatra = astro_data["nakshatra"]
    moon_house = astro_data["moon_house"]
    houses = astro_data["houses"]
    sun_pos = astro_data["sun"]
    angle = (moon_pos - sun_pos) % 360
    
    lon_360 = lon if lon >= 0 else 360 + lon
    rahu_diff = min(
        abs(lon_360 - rahu_pos),
        abs(lon_360 - rahu_pos + 360),
        abs(lon_360 - rahu_pos - 360)
    )
    
    cond1 = rahu_diff <= 3
    in_8th = 210 <= angle <= 240
    in_12th = 330 <= angle <= 360
    in_mula = nakshatra == "–ú—É–ª–∞"
    cond2 = in_8th or in_12th or in_mula
    cond3 = nakshatra in ["–ê—à–≤–∏–Ω–∏", "–®–∞—Ç–∞–±—Ö–∏—à–∞", "–ú—É–ª–∞", "–£—Ç—Ç–∞—Ä–∞ –ë—Ö–∞–¥—Ä–∞–ø–∞–¥–∞", 
                          "–ü—É—Ä–≤–∞ –ê—à–∞–¥—Ö–∞", "–£—Ç—Ç–∞—Ä–∞ –ê—à–∞–¥—Ö–∞", "–®—Ä–∞–≤–∞–Ω–∞", 
                          "–ü—É—Ä–≤–∞ –§–∞–ª–≥—É–Ω–∏", "–£—Ç—Ç–∞—Ä–∞ –§–∞–ª–≥—É–Ω–∏"]
    cond4 = 25 <= abs(lat) <= 50
    cond5 = is_night(lat, lon, dt)
    kp = get_kp_index(dt.date())
    cond6 = kp <= 5
    
    if (cond1 or cond3 or cond5) and cond2 and cond4 and cond6:
        event_type = "‚úÖ –¢–∏–ø 1 (–ì–µ–æ–ø–æ—Ä—Ç–∞–ª)"
    elif (in_8th or in_12th) and cond3 and cond6:
        event_type = "üå§ –¢–∏–ø 2 (–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π)"
    elif cond1 and (in_8th or in_12th or in_mula) and kp >= 6:
        event_type = "üí• –¢–∏–ø 4 (–ê–≤–∞—Ä–∏–π–Ω—ã–π)"
    elif cond6 and cond5 and (cond1 or cond3):
        event_type = "üëÅÔ∏è –¢–∏–ø 5 (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π)"
    elif cond5 and cond6 and (cond1 or cond3) and is_historical_contact(lat, lon, dt):
        event_type = "üëΩ –¢–∏–ø 6 (–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π)"
    else:
        event_type = "‚ùå –í–Ω–µ —Å–∏—Å—Ç–µ–º—ã"

    details = (
        f"‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.4f}, {lon:.4f}\n"
        f"‚Ä¢ –ù–∞–∫—à–∞—Ç—Ä–∞: {nakshatra or '‚Äî'}\n"
        f"‚Ä¢ –î–æ–º –õ—É–Ω—ã: {moon_house or '‚Äî'}\n"
        f"‚Ä¢ –ó–Ω–∞–∫ –õ—É–Ω—ã: {astro_data['moon_sign']}\n"
        f"‚Ä¢ –†–∞—Ö—É –æ—Ç –¥–æ–ª–≥–æ—Ç—ã: {rahu_diff:.1f}¬∞\n"
        f"‚Ä¢ Kp-–∏–Ω–¥–µ–∫—Å: {kp}\n"
        f"‚Ä¢ –ù–æ—á—å: {'–î–∞' if cond5 else '–ù–µ—Ç'}"
    )
    return event_type, details

def is_historical_contact(lat, lon, dt):
    historical_events = [
        {"lat": 33.3943, "lon": -104.5230, "date": "1947-07-05"},
        {"lat": 52.2392, "lon": -2.6190, "date": "1980-12-26"},
        {"lat": -33.9000, "lon": 18.4200, "date": "1994-01-21"}
    ]
    
    event_date = dt.strftime("%Y-%m-%d")
    
    for event in historical_events:
        lat_diff = abs(event["lat"] - lat)
        lon_diff = abs(event["lon"] - lon)
        if lat_diff < 0.1 and lon_diff < 0.1 and event["date"] == event_date:
            return True
    return False

RUSSIAN_CITIES = [
    "–ê–±–∞–∫–∞–Ω", "–ê–Ω–∞–¥—ã—Ä—å", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å", "–ë–∞—Ä–Ω–∞—É–ª", "–ë–µ–ª–≥–æ—Ä–æ–¥", 
    "–ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–ë—Ä–∞—Ç—Å–∫", "–ë—Ä—è–Ω—Å–∫", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", 
    "–í–ª–∞–¥–∏–º–∏—Ä", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–í–æ–ª–æ–≥–¥–∞", "–í–æ—Ä–∫—É—Ç–∞", "–í–æ—Ä–æ–Ω–µ–∂", "–ì–æ—Ä–Ω–æ-–ê–ª—Ç–∞–π—Å–∫", 
    "–ì—Ä–æ–∑–Ω—ã–π", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ò–≤–∞–Ω–æ–≤–æ", "–ò–∂–µ–≤—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–ô–æ—à–∫–∞—Ä-–û–ª–∞", 
    "–ö–∞–∑–∞–Ω—å", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–ª—É–≥–∞", "–ö–µ–º–µ—Ä–æ–≤–æ", "–ö–∏—Ä–æ–≤", "–ö–∏—à–∏–Ω—ë–≤", 
    "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ", "–ö–æ—Å—Ç—Ä–æ–º–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ö—É—Ä–≥–∞–Ω", "–ö—É—Ä—Å–∫", 
    "–ö—ã–∑—ã–ª", "–õ–µ–Ω—Å–∫", "–õ–∏–ø–µ—Ü–∫", "–ú–∞–≥–∞–¥–∞–Ω", "–ú–∞–π–∫–æ–ø", "–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–ú–µ—â–æ–≤—Å–∫", 
    "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã", "–ú–∏—Ä–Ω—ã–π (–Ø–∫—É—Ç–∏—è)", "–ú–æ—Å–∫–≤–∞", "–ú—É—Ä–º–∞–Ω—Å–∫", "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã", 
    "–ù–∞–∑—Ä–∞–Ω—å", "–ù–∞–ª—å—á–∏–∫", "–ù–µ—Ä—é–Ω–≥—Ä–∏", "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ù–æ–≤–≥–æ—Ä–æ–¥", 
    "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π", "–ù–æ—Ä–∏–ª—å—Å–∫", "–û–º—Å–∫", "–û—Ä–µ–Ω–±—É—Ä–≥", 
    "–û—Ä—ë–ª", "–ü–µ–Ω–∑–∞", "–ü–µ—Ä–º—å", "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π", "–ü—Å–∫–æ–≤", 
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–†—è–∑–∞–Ω—å", "–°–∞–ª–µ—Ö–∞—Ä–¥", "–°–∞–º–∞—Ä–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–∞—Ä–∞–Ω—Å–∫", 
    "–°–∞—Ä–∞—Ç–æ–≤", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "–°–º–æ–ª–µ–Ω—Å–∫", "–°–æ—á–∏", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", 
    "–°—Ç–∞–Ω—Ü–∏—è –í–æ—Å—Ç–æ–∫", "–°—Ç–∞–Ω—Ü–∏—è –ú–∏—Ä–Ω—ã–π", "–°—É—Ä–≥—É—Ç", "–°—ã–∫—Ç—ã–≤–∫–∞—Ä", "–¢–∞–º–±–æ–≤", "–¢–≤–µ—Ä—å", 
    "–¢–∏–∫—Å–∏", "–¢–æ–ª—å—è—Ç—Ç–∏", "–¢–æ–º—Å–∫", "–¢—É–ª–∞", "–¢—é–º–µ–Ω—å", "–£–ª–∞–Ω-–£–¥—ç", "–£–ª—å—è–Ω–æ–≤—Å–∫", "–£—Ñ–∞", 
    "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü", "–ß–µ—Ä–∫–µ—Å—Å–∫", 
    "–ß–∏—Ç–∞", "–≠–ª–∏—Å—Ç–∞", "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫", "–Ø–∫—É—Ç—Å–∫", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å"
]

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for i in range(0, min(50, len(RUSSIAN_CITIES)), 2):
        row = []
        row.append(KeyboardButton(RUSSIAN_CITIES[i]))
        if i+1 < len(RUSSIAN_CITIES):
            row.append(KeyboardButton(RUSSIAN_CITIES[i+1]))
        keyboard.append(row)
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await update.message.reply_text(
        "üåç <b>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç–∞–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "–î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å 2000 –≥–æ–¥–∞.\n"
        "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –ø–æ—Ä—Ç–∞–ª—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n"
        "–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: " + str(len(RUSSIAN_CITIES)),
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    
    return STATE_SELECT_CITY

async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    
    if user_input not in RUSSIAN_CITIES:
        keyboard = []
        for i in range(0, min(50, len(RUSSIAN_CITIES)), 2):
            row = []
            row.append(KeyboardButton(RUSSIAN_CITIES[i]))
            if i+1 < len(RUSSIAN_CITIES):
                row.append(KeyboardButton(RUSSIAN_CITIES[i+1]))
            keyboard.append(row)
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=reply_markup
        )
        return STATE_SELECT_CITY
    
    context.user_data['city'] = user_input
    
    keyboard = [
        [KeyboardButton("–ì–µ–æ–ø–æ—Ä—Ç–∞–ª ‚úÖ"), KeyboardButton("–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π üå§")],
        [KeyboardButton("–ê–≤–∞—Ä–∏–π–Ω—ã–π üí•")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await update.message.reply_text(
        f"üîç –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: <b>{user_input}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
        "‚Ä¢ –ì–µ–æ–ø–æ—Ä—Ç–∞–ª (–¢–∏–ø 1)\n"
        "‚Ä¢ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π (–¢–∏–ø 2)\n"
        "‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω—ã–π (–¢–∏–ø 4)\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    
    return STATE_SELECT_TYPE

async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()
    portal_type = None
    
    if "–≥–µ–æ–ø–æ—Ä—Ç–∞–ª" in user_input or "1" in user_input or "‚úÖ" in user_input:
        portal_type = 1
    elif "–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π" in user_input or "2" in user_input or "üå§" in user_input:
        portal_type = 2
    elif "–∞–≤–∞—Ä–∏–π–Ω—ã–π" in user_input or "4" in user_input or "üí•" in user_input:
        portal_type = 4
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ—Ä—Ç–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ì–µ–æ–ø–æ—Ä—Ç–∞–ª ‚úÖ"), KeyboardButton("–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π üå§")],
                    [KeyboardButton("–ê–≤–∞—Ä–∏–π–Ω—ã–π üí•")]
                ],
                resize_keyboard=True
            )
        )
        return STATE_SELECT_TYPE
    
    context.user_data['portal_type'] = portal_type
    
    await update.message.reply_text(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ —Å 2000 –≥–æ–¥–∞):\n\n"
        "–î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å 2000 –≥–æ–¥–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return STATE_ENTER_YEAR

async def enter_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        year = int(update.message.text)
        if year < 2000:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å 2000 –≥–æ–¥–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2000-2100."
            )
            return STATE_ENTER_YEAR
        
        if year > 2100:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2000-2100."
            )
            return STATE_ENTER_YEAR
        
        context.user_data['year'] = year
        
        keyboard = [
            [KeyboardButton("üóì –Ø–Ω–≤–∞—Ä—å‚Äì–ò—é–Ω—å")],
            [KeyboardButton("üóì –ò—é–ª—å‚Äì–î–µ–∫–∞–±—Ä—å")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üìÖ –ì–æ–¥ {year} –≤—ã–±—Ä–∞–Ω.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –º–µ—Å—è—Ü–µ–≤:",
            reply_markup=reply_markup
        )
        
        return STATE_SELECT_MONTH_BLOCK
    
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025).")
        return STATE_ENTER_YEAR

async def select_month_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    
    if "–Ø–Ω–≤–∞—Ä—å‚Äì–ò—é–Ω—å" in user_input:
        months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å"]
        month_nums = [1, 2, 3, 4, 5, 6]
    elif "–ò—é–ª—å‚Äì–î–µ–∫–∞–±—Ä—å" in user_input:
        months = ["–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
        month_nums = [7, 8, 9, 10, 11, 12]
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return STATE_SELECT_MONTH_BLOCK
    
    keyboard = []
    for i in range(0, len(months), 2):
        row = []
        row.append(KeyboardButton(months[i]))
        if i+1 < len(months):
            row.append(KeyboardButton(months[i+1]))
        keyboard.append(row)
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=reply_markup
    )
    
    context.user_data['month_options'] = dict(zip(months, month_nums))
    return STATE_ENTER_MONTH

async def enter_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üîí –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    if not context.user_data.get('city') or context.user_data.get('portal_type') is None or not context.user_data.get('year'):
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return ConversationHandler.END

    try:
        month_name = update.message.text
        month_nums = context.user_data.get('month_options', {})
        month = month_nums.get(month_name)
        
        if month is None:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return STATE_ENTER_MONTH
        
        context.user_data['month'] = month
        
        city = context.user_data.get('city')
        portal_type = context.user_data.get('portal_type')
        year = context.user_data.get('year')
        
        try:
            loc = geolocator.geocode(city, timeout=10)
            if not loc:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞.")
                return ConversationHandler.END
            lat, lon = loc.latitude, loc.longitude
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è {city}: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞.")
            return ConversationHandler.END
        
        await update.message.reply_text(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–∞ {month}.{year} –¥–ª—è {city}...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        results = []
        for day in range(1, 32):
            try:
                dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
                event_type, _ = get_event_analysis(lat, lon, dt)
                
                if (portal_type == 1 and "–¢–∏–ø 1" in event_type) or \
                   (portal_type == 2 and "–¢–∏–ø 2" in event_type) or \
                   (portal_type == 4 and "–¢–∏–ø 4" in event_type):
                    results.append(f"{day:02d}.{month:02d}.{year} ‚Äî {event_type}")
            except:
                continue
        
        context.user_data['results'] = results
        context.user_data['current_page'] = 0
        
        await show_results(update, context)
        return STATE_SHOW_RESULTS
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ enter_month: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = context.user_data.get('results', [])
    page = context.user_data.get('current_page', 0)
    per_page = 10
    
    if not results:
        await update.message.reply_text("‚ùå –ü–æ—Ä—Ç–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return STATE_ENTER_YEAR
    
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_results = results[start_idx:end_idx]
    
    full = "\n".join(page_results)
    
    keyboard = []
    if start_idx > 0:
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏")])
    if end_idx < len(results):
        keyboard.append([KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏")])
    keyboard.append([KeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü")])
    keyboard.append([KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ({start_idx + 1}‚Äì{min(end_idx, len(results))} –∏–∑ {len(results)}):\n\n{full}",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def next_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_page'] += 1
    await show_results(update, context)
    return STATE_SHOW_RESULTS

async def prev_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_page'] -= 1
    await show_results(update, context)
    return STATE_SHOW_RESULTS

async def next_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_month = context.user_data.get('month')
    current_year = context.user_data.get('year')

    if current_month is None or current_year is None:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    if current_month == 12:
        new_month = 1
        new_year = current_year + 1
    else:
        new_month = current_month + 1
        new_year = current_year

    context.user_data['month'] = new_month
    context.user_data['year'] = new_year

    await enter_month(update, context)
    return STATE_ENTER_MONTH

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def manual_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {update.message.text}")
        text = update.message.text.strip()
        if "," not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

        parts = text.split(",", 1)
        if len(parts) < 2:
            raise ValueError("–ù—É–∂–Ω–æ: –¥–∞—Ç–∞, –º–µ—Å—Ç–æ")

        date_str = parts[0].strip()
        rest = parts[1].strip()

        months = {
            "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
            "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
            "january":1, "february":2, "march":3, "april":4, "may":5, "june":6,
            "july":7, "august":8, "september":9, "october":10, "november":11, "december":12,
            "jan":1, "feb":2, "mar":3, "apr":4, "may":5, "jun":6,
            "jul":7, "aug":8, "sep":9, "oct":10, "nov":11, "dec":12
        }
        date_parts = date_str.split()
        if len(date_parts) == 3:
            day = int(date_parts[0])
            month_str = date_parts[1].lower().rstrip('.')
            year = int(date_parts[2])
            month = months.get(month_str, 1)
            if month == 1 and month_str not in months:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü")
            dt = datetime.datetime(year, month, day, 15, tzinfo=pytz.UTC)
        else:
            raise ValueError("–§–æ—Ä–º–∞—Ç: 5 –∏—é–ª—è 1947")

        if year < 2000:
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å 2000 –≥–æ–¥–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø–æ—Å–ª–µ 2000."
            )
            return

        place_synonyms = {
            "–†–æ–∑—É—ç–ª–ª": "Roswell",
            "–°–®–ê": "USA",
            "–ú–æ—Å–∫–≤–∞": "Moscow",
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "Saint Petersburg",
            # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
        }

        for key, value in place_synonyms.items():
            rest = rest.replace(key, value)

        try:
            coords = [float(x.strip()) for x in rest.split(",")]
            if len(coords) != 2:
                raise ValueError()
            lat, lon = coords
        except:
            loc = geolocator.geocode(rest, timeout=10)
            if not loc:
                raise ValueError("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            lat, lon = loc.latitude, loc.longitude

        event_type, details = get_event_analysis(lat, lon, dt)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {event_type}")
        await update.message.reply_text(f"{event_type}\n{details}", parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manual_search: {e}")
        await update.message.reply_text(
            f"‚ö†Ô∏è {str(e)}\n\n–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>5 –∏—é–ª—è 2000, Roswell, USA</code>\n"
            "‚Ä¢ <code>5 –∏—é–ª—è 2000, 33.3943, -104.5230</code>",
            parse_mode="HTML"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–≥–æ–¥</b>:\n"
        "   ‚Üí <code>2025</code>\n"
        "   ‚Üí –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤ –≤ —ç—Ç–æ–º –≥–æ–¥—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ</b>:\n"
        "   ‚Üí <code>5 –∏—é–ª—è 2000, Roswell, USA</code>\n"
        "   ‚Üí –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–∂–π–æ—Ç–∏—à-–∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏—è.\n\n"
        "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "   ‚Üí <code>/start</code> ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "   ‚Üí <code>/help</code> ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–î–∞–Ω–Ω—ã–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å 2000 –≥–æ–¥–∞.",
        parse_mode="HTML"
    )

# === –ó–ê–ü–£–°–ö (–í–ï–ë–•–£–ö–ò –î–õ–Ø REPLIT) ===

if __name__ == "__main__":
    import time
    from threading import Thread
    from dotenv import load_dotenv
    load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç .env

    TOKEN = os.environ["TELEGRAM_TOKEN"]
    WEBHOOK_URL = f"https://{os.environ.get('REPL_SLUG')}.{os.environ.get('REPL_OWNER')}.repl.co"

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_SELECT_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_city)],
            STATE_SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_type)],
            STATE_ENTER_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_year)],
            STATE_SELECT_MONTH_BLOCK: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_month_block)],
            STATE_ENTER_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_month)],
            STATE_SHOW_RESULTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r"‚û°Ô∏è"), next_days),
                MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r"‚¨ÖÔ∏è"), prev_days),
                MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r"üîÑ"), next_month),
                MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r"üîö"), cancel)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'\d+\s+\w+,\s+[\w\s]+'), manual_search))

    @flask_app.route(f'/{TOKEN}', methods=['POST'])
    def webhook():
        update = Update.de_json(request.get_json(force=True), app.bot)
        app.update_queue.put_nowait(update)
        return 'OK'

    def set_webhook():
        time.sleep(2)
        app.bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}/{TOKEN}")

    Thread(target=set_webhook).start()
    flask_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 8080)))